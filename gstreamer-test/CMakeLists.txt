project(gstreamer-test)

set(CMAKE_CXX_STANDARD 11)

include(display_list)
include(show_target_properties)

find_package(EGL REQUIRED)
find_package(OpenGLES2 REQUIRED)
find_package(Wayland REQUIRED)
find_package(WaylandEGL REQUIRED)
find_package(LibGlib2 REQUIRED)
find_package(GStreamer1 REQUIRED)
if (SYNAPTICS_PLATFORM)
    find_package(MarvellSDK REQUIRED)
endif()

set(GSTREAMER_TEST_PACKAGE_NAME gstreamer-test)
set(GSTREAMER_TEST_TARGET_NAME ${GSTREAMER_TEST_PACKAGE_NAME})
set(GSTREAMER_TEST_PACKAGE_DESCRIPTION "Westeros gstreamer test player")
set(GSTREAMER_TEST_PACKAGE_VERSION_MAJOR 0)
set(GSTREAMER_TEST_PACKAGE_VERSION_MINOR 0)
set(GSTREAMER_TEST_PACKAGE_VERSION_MICRO 0)
set(GSTREAMER_TEST_PACKAGE_VERSION ${GSTREAMER_TEST_PACKAGE_VERSION_MAJOR}.${GSTREAMER_TEST_PACKAGE_VERSION_MINOR}.${GSTREAMER_TEST_PACKAGE_VERSION_MICRO})

set(GSTREAMER_TEST_DEFINITIONS
    HAVE_CONFIG_H
    WESTEROS_PLATFORM_EMBEDDED
    WESTEROS_HAVE_WAYLAND_EGL
    ENABLE_SBPROTOCOL
    USE_XDG_VERSION5
    VCX=3)
if (SYNAPTICS_PLATFORM)
    list(APPEND GSTREAMER_TEST_DEFINITIONS
        LINUX
        EGL_API_FB)
elseif(RPI_PLATFORM)
    list(APPEND GSTREAMER_TEST_DEFINITIONS
        WESTEROS_PLATFORM_RPI
        WESTEROS_INVERTED_Y
        BUILD_WAYLAND)
elseif(X86_64_PLATFORM)
    list(APPEND GSTREAMER_TEST_DEFINITIONS
        )
else()
    message(ERROR "Unsupported platform")
endif()

set(GSTREAMER_TEST_INCLUDE_DIRS
    ./protocol/version5
    ${GSTREAMER_INCLUDE_DIR}
    ${LIBGLIB2_CONFIG_INCLUDE_DIR}
    ${LIBGLIB2_INCLUDE_DIR}
    ${WAYLAND_CLIENT_INCLUDE_DIR}
    )

set(GSTREAMER_TEST_OPTIONS
    )

set(GSTREAMER_TEST_LINK_OPTIONS
    )

set(GSTREAMER_TEST_DEPENDENCIES
    )

set(GSTREAMER_TEST_LIBS
    ${CMAKE_THREAD_LIBS_INIT}
    ${WAYLAND_SERVER_LIBRARIES}
    ${GSTREAMER_LIBRARY}
    ${LIBGLIB2_LIBRARY}
    ${LIBGOBJECT2_LIBRARY}
    ${WAYLAND_CLIENT_LIBRARIES}
    ${WAYLAND_EGL_LIBRARIES}
    ${OPENGLES2_LIBRARIES}
    ${EGL_LIBRARIES}
    ${GSTREAMER_TEST_DEPENDENCIES})

file(GLOB GSTREAMER_TEST_INCLUDES
    *.h)

set(GSTREAMER_TEST_SOURCES
    main.cpp)

set(GSTREAMER_TEST_INPUT
    ${GSTREAMER_TEST_SOURCES}
    ${GSTREAMER_TEST_INCLUDES}
    )

if (BUILD_REFERENCE)
    list(APPEND GSTREAMER_TEST_DEFINITIONS BUILD_REFERENCE=${BUILD_REFERENCE})
endif()

if (VERBOSE_BUILD)
    display_list("Defines                     : " ${GSTREAMER_TEST_DEFINITIONS} )
    display_list("Compiler options            : " ${GSTREAMER_TEST_OPTIONS} )
    display_list("Source files                : " ${GSTREAMER_TEST_SOURCES} )
    display_list("Include files               : " ${GSTREAMER_TEST_INCLUDES} )
    display_list("Include dirs                : " ${GSTREAMER_TEST_INCLUDE_DIRS} )
    display_list("Link libs                   : " ${GSTREAMER_TEST_LIBS} )
    display_list("Linker options              : " ${GSTREAMER_TEST_LINK_OPTIONS} )
    display_list("Dependencies                : " ${GSTREAMER_TEST_DEPENDENCIES} )
endif()

add_executable(${GSTREAMER_TEST_TARGET_NAME} ${GSTREAMER_TEST_INPUT})
target_compile_definitions(${GSTREAMER_TEST_TARGET_NAME} PRIVATE ${GSTREAMER_TEST_DEFINITIONS})
target_compile_options(${GSTREAMER_TEST_TARGET_NAME} PRIVATE ${GSTREAMER_TEST_OPTIONS})
target_include_directories(${GSTREAMER_TEST_TARGET_NAME} PUBLIC ${GSTREAMER_TEST_INCLUDE_DIRS})
target_link_libraries(${GSTREAMER_TEST_TARGET_NAME} ${GSTREAMER_TEST_LIBS})
foreach(DEP ${GSTREAMER_TEST_DEPENDENCIES})
    add_dependencies(${GSTREAMER_TEST_TARGET_NAME} ${DEP})
endforeach()
list_to_string(GSTREAMER_TEST_LINK_OPTIONS GSTREAMER_TEST_LINK_OPTIONS_STRING)
if (NOT "${GSTREAMER_TEST_LINK_OPTIONS_STRING}" STREQUAL "")
    set_target_properties(${GSTREAMER_TEST_TARGET_NAME} PROPERTIES LINK_FLAGS "${GSTREAMER_TEST_LINK_OPTIONS_STRING}")
endif()
set_target_properties(${GSTREAMER_TEST_TARGET_NAME} PROPERTIES VERSION ${GSTREAMER_TEST_PACKAGE_VERSION})
set_target_properties(${GSTREAMER_TEST_TARGET_NAME} PROPERTIES SOVERSION ${GSTREAMER_TEST_PACKAGE_VERSION_MAJOR})
set_target_properties(${GSTREAMER_TEST_TARGET_NAME} PROPERTIES OUTPUT_NAME ${GSTREAMER_TEST_TARGET_NAME})
set_target_properties(${GSTREAMER_TEST_TARGET_NAME} PROPERTIES POSITION_INDEPENDENT_CODE ON)

if (VERBOSE_BUILD)
    show_target_properties(${GSTREAMER_TEST_TARGET_NAME})
endif()

add_custom_target(uninstall_${GSTREAMER_TEST_TARGET_NAME}
    COMMAND ${CMAKE_COMMAND} -DCOMPONENT=${MODULE_NAME} -P ${CMAKE_CURRENT_BINARY_DIR}/uninstall.cmake
    DEPENDS ${GSTREAMER_TEST_TARGET_NAME}
    COMMENT "Uninstalling ${GSTREAMER_TEST_TARGET_NAME}")

add_custom_target(install_${GSTREAMER_TEST_TARGET_NAME}
    COMMAND ${CMAKE_COMMAND} -DCOMPONENT=${MODULE_NAME} -P ${CMAKE_BINARY_DIR}/cmake_install.cmake
    DEPENDS ${GSTREAMER_TEST_TARGET_NAME}
    COMMENT "Installing ${GSTREAMER_TEST_TARGET_NAME}")

install(
    TARGETS ${GSTREAMER_TEST_TARGET_NAME}
    DESTINATION ${CMAKE_INSTALL_PREFIX}/lib
    COMPONENT ${GSTREAMER_TEST_TARGET_NAME})

