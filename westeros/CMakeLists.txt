project(westeros)

set(CMAKE_CXX_STANDARD 11)

include(display_list)
include(show_target_properties)

find_package(EGL REQUIRED)
find_package(OpenGLES2 REQUIRED)
find_package(Wayland REQUIRED)
find_package(LibXkbCommon REQUIRED)
find_package(LibFfi REQUIRED)
if (SYNAPTICS_PLATFORM)
    find_package(MarvellSDK REQUIRED)
elseif (RPI_PLATFORM)
    find_package(RPIVcHostIf REQUIRED)
endif()
find_package(LibGlib2 REQUIRED)
find_package(GStreamer1 REQUIRED)

configure_file(
    ${CMAKE_SOURCE_DIR}/cmake/uninstall.cmake.in
    ${CMAKE_CURRENT_BINARY_DIR}/uninstall.cmake
    IMMEDIATE @ONLY)

## vpc

set(WESTEROS_VPC_PROTOCOL_SOURCE
    ${CMAKE_CURRENT_SOURCE_DIR}/protocol/vpc.xml)
set(WESTEROS_VPC_PROTOCOL_OUTPUT_SOURCE
    ${CMAKE_CURRENT_SOURCE_DIR}/protocol/vpc-protocol.c)
set(WESTEROS_VPC_PROTOCOL_OUTPUT_CLIENT_HEADER
    ${CMAKE_CURRENT_SOURCE_DIR}/protocol/vpc-client-protocol.h)
set(WESTEROS_VPC_PROTOCOL_OUTPUT_SERVER_HEADER
    ${CMAKE_CURRENT_SOURCE_DIR}/protocol/vpc-server-protocol.h)

add_custom_command(OUTPUT ${WESTEROS_VPC_PROTOCOL_OUTPUT_SOURCE}
    COMMAND ${WAYLAND_SCANNER_EXECUTABLE} code ${WESTEROS_VPC_PROTOCOL_SOURCE} ${WESTEROS_VPC_PROTOCOL_OUTPUT_SOURCE}
    COMMENT "Generate ${WESTEROS_VPC_PROTOCOL_OUTPUT_SOURCE}"
    WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR})

add_custom_command(OUTPUT ${WESTEROS_VPC_PROTOCOL_OUTPUT_CLIENT_HEADER}
    COMMAND ${WAYLAND_SCANNER_EXECUTABLE} client-header ${WESTEROS_VPC_PROTOCOL_SOURCE} ${WESTEROS_VPC_PROTOCOL_OUTPUT_CLIENT_HEADER}
    COMMENT "Generate ${WESTEROS_VPC_PROTOCOL_OUTPUT_CLIENT_HEADER}"
    WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR})

add_custom_command(OUTPUT ${WESTEROS_VPC_PROTOCOL_OUTPUT_SERVER_HEADER}
    COMMAND ${WAYLAND_SCANNER_EXECUTABLE} server-header ${WESTEROS_VPC_PROTOCOL_SOURCE} ${WESTEROS_VPC_PROTOCOL_OUTPUT_SERVER_HEADER}
    COMMENT "Generate ${WESTEROS_VPC_PROTOCOL_OUTPUT_SERVER_HEADER}"
    WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR})

add_custom_target(westeros-vpc-protocol
    DEPENDS
    ${WESTEROS_VPC_PROTOCOL_OUTPUT_SOURCE}
    ${WESTEROS_VPC_PROTOCOL_OUTPUT_CLIENT_HEADER}
    ${WESTEROS_VPC_PROTOCOL_OUTPUT_SERVER_HEADER})

## xdgv4

set(WESTEROS_XDGSHELL_V4_PROTOCOL_SOURCE
    ${CMAKE_CURRENT_SOURCE_DIR}/protocol/version4/xdg-shell.xml)
set(WESTEROS_XDGSHELL_V4_PROTOCOL_OUTPUT_SOURCE
    ${CMAKE_CURRENT_SOURCE_DIR}/protocol/version4/xdg-shell-protocol.c)
set(WESTEROS_XDGSHELL_V4_PROTOCOL_OUTPUT_CLIENT_HEADER
    ${CMAKE_CURRENT_SOURCE_DIR}/protocol/version4/xdg-shell-client-protocol.h)
set(WESTEROS_XDGSHELL_V4_PROTOCOL_OUTPUT_SERVER_HEADER
    ${CMAKE_CURRENT_SOURCE_DIR}/protocol/version4/xdg-shell-server-protocol.h)

add_custom_command(OUTPUT ${WESTEROS_XDGSHELL_V4_PROTOCOL_OUTPUT_SOURCE}
    COMMAND ${WAYLAND_SCANNER_EXECUTABLE} code ${WESTEROS_XDGSHELL_V4_PROTOCOL_SOURCE} ${WESTEROS_XDGSHELL_V4_PROTOCOL_OUTPUT_SOURCE}
    COMMENT "Generate ${WESTEROS_XDGSHELL_V4_PROTOCOL_OUTPUT_SOURCE}"
    WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR})

add_custom_command(OUTPUT ${WESTEROS_XDGSHELL_V4_PROTOCOL_OUTPUT_CLIENT_HEADER}
    COMMAND ${WAYLAND_SCANNER_EXECUTABLE} client-header ${WESTEROS_XDGSHELL_V4_PROTOCOL_SOURCE} ${WESTEROS_XDGSHELL_V4_PROTOCOL_OUTPUT_CLIENT_HEADER}
    COMMENT "Generate ${WESTEROS_XDGSHELL_V4_PROTOCOL_OUTPUT_CLIENT_HEADER}"
    WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR})

add_custom_command(OUTPUT ${WESTEROS_XDGSHELL_V4_PROTOCOL_OUTPUT_SERVER_HEADER}
    COMMAND ${WAYLAND_SCANNER_EXECUTABLE} server-header ${WESTEROS_XDGSHELL_V4_PROTOCOL_SOURCE} ${WESTEROS_XDGSHELL_V4_PROTOCOL_OUTPUT_SERVER_HEADER}
    COMMENT "Generate ${WESTEROS_XDGSHELL_V4_PROTOCOL_OUTPUT_SERVER_HEADER}"
    WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR})

add_custom_target(westeros-xdgv4-protocol
    DEPENDS
    ${WESTEROS_XDGSHELL_V4_PROTOCOL_OUTPUT_SOURCE}
    ${WESTEROS_XDGSHELL_V4_PROTOCOL_OUTPUT_CLIENT_HEADER}
    ${WESTEROS_XDGSHELL_V4_PROTOCOL_OUTPUT_SERVER_HEADER})

## xdgv5

set(WESTEROS_XDGSHELL_V5_PROTOCOL_SOURCE
    ${CMAKE_CURRENT_SOURCE_DIR}/protocol/version5/xdg-shell.xml)
set(WESTEROS_XDGSHELL_V5_PROTOCOL_OUTPUT_SOURCE
    ${CMAKE_CURRENT_SOURCE_DIR}/protocol/version5/xdg-shell-protocol.c)
set(WESTEROS_XDGSHELL_V5_PROTOCOL_OUTPUT_CLIENT_HEADER
    ${CMAKE_CURRENT_SOURCE_DIR}/protocol/version5/xdg-shell-client-protocol.h)
set(WESTEROS_XDGSHELL_V5_PROTOCOL_OUTPUT_SERVER_HEADER
    ${CMAKE_CURRENT_SOURCE_DIR}/protocol/version5/xdg-shell-server-protocol.h)

add_custom_command(OUTPUT ${WESTEROS_XDGSHELL_V5_PROTOCOL_OUTPUT_SOURCE}
    COMMAND ${WAYLAND_SCANNER_EXECUTABLE} code ${WESTEROS_XDGSHELL_V5_PROTOCOL_SOURCE} ${WESTEROS_XDGSHELL_V5_PROTOCOL_OUTPUT_SOURCE}
    COMMENT "Generate ${WESTEROS_XDGSHELL_V5_PROTOCOL_OUTPUT_SOURCE}"
    WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR})

add_custom_command(OUTPUT ${WESTEROS_XDGSHELL_V5_PROTOCOL_OUTPUT_CLIENT_HEADER}
    COMMAND ${WAYLAND_SCANNER_EXECUTABLE} client-header ${WESTEROS_XDGSHELL_V5_PROTOCOL_SOURCE} ${WESTEROS_XDGSHELL_V5_PROTOCOL_OUTPUT_CLIENT_HEADER}
    COMMENT "Generate ${WESTEROS_XDGSHELL_V5_PROTOCOL_OUTPUT_CLIENT_HEADER}"
    WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR})

add_custom_command(OUTPUT ${WESTEROS_XDGSHELL_V5_PROTOCOL_OUTPUT_SERVER_HEADER}
    COMMAND ${WAYLAND_SCANNER_EXECUTABLE} server-header ${WESTEROS_XDGSHELL_V5_PROTOCOL_SOURCE} ${WESTEROS_XDGSHELL_V5_PROTOCOL_OUTPUT_SERVER_HEADER}
    COMMENT "Generate ${WESTEROS_XDGSHELL_V5_PROTOCOL_OUTPUT_SERVER_HEADER}"
    WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR})

add_custom_target(westeros-xdgv5-protocol
    DEPENDS
    ${WESTEROS_XDGSHELL_V5_PROTOCOL_OUTPUT_SOURCE}
    ${WESTEROS_XDGSHELL_V5_PROTOCOL_OUTPUT_CLIENT_HEADER}
    ${WESTEROS_XDGSHELL_V5_PROTOCOL_OUTPUT_SERVER_HEADER})

## simplebuffer

set(WESTEROS_SIMPLEBUFFER_PROTOCOL_SOURCE
    ${CMAKE_CURRENT_SOURCE_DIR}/simplebuffer/protocol/simple-buffer.xml)
set(WESTEROS_SIMPLEBUFFER_PROTOCOL_OUTPUT_SOURCE
    ${CMAKE_CURRENT_SOURCE_DIR}/simplebuffer/protocol/simplebuffer-protocol.c)
set(WESTEROS_SIMPLEBUFFER_PROTOCOL_OUTPUT_CLIENT_HEADER
    ${CMAKE_CURRENT_SOURCE_DIR}/simplebuffer/protocol/simplebuffer-client-protocol.h)
set(WESTEROS_SIMPLEBUFFER_PROTOCOL_OUTPUT_SERVER_HEADER
    ${CMAKE_CURRENT_SOURCE_DIR}/simplebuffer/protocol/simplebuffer-server-protocol.h)

add_custom_command(OUTPUT ${WESTEROS_SIMPLEBUFFER_PROTOCOL_OUTPUT_SOURCE}
    COMMAND ${WAYLAND_SCANNER_EXECUTABLE} code ${WESTEROS_SIMPLEBUFFER_PROTOCOL_SOURCE} ${WESTEROS_SIMPLEBUFFER_PROTOCOL_OUTPUT_SOURCE}
    COMMENT "Generate ${WESTEROS_SIMPLEBUFFER_PROTOCOL_OUTPUT_SOURCE}: ${WAYLAND_SCANNER_EXECUTABLE} code ${WESTEROS_SIMPLEBUFFER_PROTOCOL_SOURCE} ${WESTEROS_SIMPLEBUFFER_PROTOCOL_OUTPUT_SOURCE}"
    WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR})

add_custom_command(OUTPUT ${WESTEROS_SIMPLEBUFFER_PROTOCOL_OUTPUT_CLIENT_HEADER}
    COMMAND ${WAYLAND_SCANNER_EXECUTABLE} client-header ${WESTEROS_SIMPLEBUFFER_PROTOCOL_SOURCE} ${WESTEROS_SIMPLEBUFFER_PROTOCOL_OUTPUT_CLIENT_HEADER}
    COMMENT "Generate ${WESTEROS_SIMPLEBUFFER_PROTOCOL_OUTPUT_CLIENT_HEADER}"
    WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR})

add_custom_command(OUTPUT ${WESTEROS_SIMPLEBUFFER_PROTOCOL_OUTPUT_SERVER_HEADER}
    COMMAND ${WAYLAND_SCANNER_EXECUTABLE} server-header ${WESTEROS_SIMPLEBUFFER_PROTOCOL_SOURCE} ${WESTEROS_SIMPLEBUFFER_PROTOCOL_OUTPUT_SERVER_HEADER}
    COMMENT "Generate ${WESTEROS_SIMPLEBUFFER_PROTOCOL_OUTPUT_SERVER_HEADER}"
    WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR})

add_custom_target(westeros-simplebuffer-protocol
    DEPENDS
    ${WESTEROS_SIMPLEBUFFER_PROTOCOL_OUTPUT_SOURCE}
    ${WESTEROS_SIMPLEBUFFER_PROTOCOL_OUTPUT_CLIENT_HEADER}
    ${WESTEROS_SIMPLEBUFFER_PROTOCOL_OUTPUT_SERVER_HEADER})

## simpleshell

set(WESTEROS_SIMPLESHELL_PROTOCOL_SOURCE
    ${CMAKE_CURRENT_SOURCE_DIR}/simpleshell/protocol/simpleshell.xml)
set(WESTEROS_SIMPLESHELL_PROTOCOL_OUTPUT_SOURCE
    ${CMAKE_CURRENT_SOURCE_DIR}/simpleshell/protocol/simpleshell-protocol.c)
set(WESTEROS_SIMPLESHELL_PROTOCOL_OUTPUT_CLIENT_HEADER
    ${CMAKE_CURRENT_SOURCE_DIR}/simpleshell/protocol/simpleshell-client-protocol.h)
set(WESTEROS_SIMPLESHELL_PROTOCOL_OUTPUT_SERVER_HEADER
    ${CMAKE_CURRENT_SOURCE_DIR}/simpleshell/protocol/simpleshell-server-protocol.h)

add_custom_command(OUTPUT ${WESTEROS_SIMPLESHELL_PROTOCOL_OUTPUT_SOURCE}
    COMMAND ${WAYLAND_SCANNER_EXECUTABLE} code ${WESTEROS_SIMPLESHELL_PROTOCOL_SOURCE} ${WESTEROS_SIMPLESHELL_PROTOCOL_OUTPUT_SOURCE}
    COMMENT "Generate ${WESTEROS_SIMPLESHELL_PROTOCOL_OUTPUT_SOURCE}: ${WAYLAND_SCANNER_EXECUTABLE} code ${WESTEROS_SIMPLESHELL_PROTOCOL_SOURCE} ${WESTEROS_SIMPLESHELL_PROTOCOL_OUTPUT_SOURCE}"
    WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR})

add_custom_command(OUTPUT ${WESTEROS_SIMPLESHELL_PROTOCOL_OUTPUT_CLIENT_HEADER}
    COMMAND ${WAYLAND_SCANNER_EXECUTABLE} client-header ${WESTEROS_SIMPLESHELL_PROTOCOL_SOURCE} ${WESTEROS_SIMPLESHELL_PROTOCOL_OUTPUT_CLIENT_HEADER}
    COMMENT "Generate ${WESTEROS_SIMPLESHELL_PROTOCOL_OUTPUT_CLIENT_HEADER}"
    WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR})

add_custom_command(OUTPUT ${WESTEROS_SIMPLESHELL_PROTOCOL_OUTPUT_SERVER_HEADER}
    COMMAND ${WAYLAND_SCANNER_EXECUTABLE} server-header ${WESTEROS_SIMPLESHELL_PROTOCOL_SOURCE} ${WESTEROS_SIMPLESHELL_PROTOCOL_OUTPUT_SERVER_HEADER}
    COMMENT "Generate ${WESTEROS_SIMPLESHELL_PROTOCOL_OUTPUT_SERVER_HEADER}"
    WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR})

add_custom_target(westeros-simpleshell-protocol
    DEPENDS
    ${WESTEROS_SIMPLESHELL_PROTOCOL_OUTPUT_SOURCE}
    ${WESTEROS_SIMPLESHELL_PROTOCOL_OUTPUT_CLIENT_HEADER}
    ${WESTEROS_SIMPLESHELL_PROTOCOL_OUTPUT_SERVER_HEADER})

set(SIMPLEBUFFER_CLIENT_PACKAGE_NAME westeros_simplebuffer_client)
set(SIMPLEBUFFER_CLIENT_TARGET_NAME ${SIMPLEBUFFER_CLIENT_PACKAGE_NAME})
set(SIMPLEBUFFER_CLIENT_PACKAGE_DESCRIPTION "Westeros simple-buffer client")
set(SIMPLEBUFFER_CLIENT_PACKAGE_VERSION_MAJOR 0)
set(SIMPLEBUFFER_CLIENT_PACKAGE_VERSION_MINOR 0)
set(SIMPLEBUFFER_CLIENT_PACKAGE_VERSION_MICRO 0)
set(SIMPLEBUFFER_CLIENT_PACKAGE_VERSION ${SIMPLEBUFFER_CLIENT_PACKAGE_VERSION_MAJOR}.${SIMPLEBUFFER_CLIENT_PACKAGE_VERSION_MINOR}.${SIMPLEBUFFER_CLIENT_PACKAGE_VERSION_MICRO})

set(SIMPLEBUFFER_CLIENT_DEFINITIONS
    HAVE_CONFIG_H)

set(SIMPLEBUFFER_CLIENT_INCLUDE_DIRS
    ${WAYLAND_SERVER_INCLUDE_DIR}
    simplebuffer/protocol
    )

set(SIMPLEBUFFER_CLIENT_OPTIONS
    )

set(SIMPLEBUFFER_CLIENT_LINK_OPTIONS
    )

set(SIMPLEBUFFER_CLIENT_DEPENDENCIES
    westeros-simplebuffer-protocol)

set(SIMPLEBUFFER_CLIENT_LIBS
    ${CMAKE_THREAD_LIBS_INIT}
    ${WAYLAND_CLIENT_LIBRARIES}
    ${LIB_FFI_LIBRARIES})

file(GLOB_RECURSE SIMPLEBUFFER_CLIENT_INCLUDES
    simplebuffer/*.h)

set(SIMPLEBUFFER_CLIENT_SOURCES
    ${WESTEROS_SIMPLEBUFFER_PROTOCOL_OUTPUT_SOURCE})

set(SIMPLEBUFFER_CLIENT_INPUT
    ${SIMPLEBUFFER_CLIENT_SOURCES}
    ${SIMPLEBUFFER_CLIENT_INCLUDES}
    )

if (BUILD_REFERENCE)
    list(APPEND SIMPLEBUFFER_CLIENT_DEFINITIONS BUILD_REFERENCE=${BUILD_REFERENCE})
endif()

if (VERBOSE_BUILD)
    display_list("Defines                     : " ${SIMPLEBUFFER_CLIENT_DEFINITIONS} )
    display_list("Compiler options            : " ${SIMPLEBUFFER_CLIENT_OPTIONS} )
    display_list("Source files                : " ${SIMPLEBUFFER_CLIENT_SOURCES} )
    display_list("Include files               : " ${SIMPLEBUFFER_CLIENT_INCLUDES} )
    display_list("Include dirs                : " ${SIMPLEBUFFER_CLIENT_INCLUDE_DIRS} )
    display_list("Link libs                   : " ${SIMPLEBUFFER_CLIENT_LIBS} )
    display_list("Linker options              : " ${SIMPLEBUFFER_CLIENT_LINK_OPTIONS} )
    display_list("Dependencies                : " ${SIMPLEBUFFER_CLIENT_DEPENDENCIES} )
endif()

add_library(${SIMPLEBUFFER_CLIENT_TARGET_NAME} SHARED ${SIMPLEBUFFER_CLIENT_INPUT})
target_compile_definitions(${SIMPLEBUFFER_CLIENT_TARGET_NAME} PRIVATE ${SIMPLEBUFFER_CLIENT_DEFINITIONS})
target_compile_options(${SIMPLEBUFFER_CLIENT_TARGET_NAME} PRIVATE ${SIMPLEBUFFER_CLIENT_OPTIONS})
target_include_directories(${SIMPLEBUFFER_CLIENT_TARGET_NAME} PUBLIC ${SIMPLEBUFFER_CLIENT_INCLUDE_DIRS})
target_link_libraries(${SIMPLEBUFFER_CLIENT_TARGET_NAME} ${SIMPLEBUFFER_CLIENT_LIBS})
foreach(DEP ${SIMPLEBUFFER_CLIENT_DEPENDENCIES})
    add_dependencies(${SIMPLEBUFFER_CLIENT_TARGET_NAME} ${DEP})
endforeach()
list_to_string(SIMPLEBUFFER_CLIENT_LINK_OPTIONS SIMPLEBUFFER_CLIENT_LINK_OPTIONS_STRING)
if (NOT "${SIMPLEBUFFER_CLIENT_LINK_OPTIONS_STRING}" STREQUAL "")
    set_target_properties(${SIMPLEBUFFER_CLIENT_TARGET_NAME} PROPERTIES LINK_FLAGS "${SIMPLEBUFFER_CLIENT_LINK_OPTIONS_STRING}")
endif()
set_target_properties(${SIMPLEBUFFER_CLIENT_TARGET_NAME} PROPERTIES VERSION ${SIMPLEBUFFER_CLIENT_PACKAGE_VERSION})
set_target_properties(${SIMPLEBUFFER_CLIENT_TARGET_NAME} PROPERTIES SOVERSION ${SIMPLEBUFFER_CLIENT_PACKAGE_VERSION_MAJOR})
set_target_properties(${SIMPLEBUFFER_CLIENT_TARGET_NAME} PROPERTIES OUTPUT_NAME ${SIMPLEBUFFER_CLIENT_TARGET_NAME})
set_target_properties(${SIMPLEBUFFER_CLIENT_TARGET_NAME} PROPERTIES POSITION_INDEPENDENT_CODE ON)

if (VERBOSE_BUILD)
    show_target_properties(${SIMPLEBUFFER_CLIENT_TARGET_NAME})
endif()

add_library(${SIMPLEBUFFER_CLIENT_TARGET_NAME}_STATIC STATIC ${SIMPLEBUFFER_CLIENT_INPUT})
target_compile_definitions(${SIMPLEBUFFER_CLIENT_TARGET_NAME}_STATIC PRIVATE ${SIMPLEBUFFER_CLIENT_DEFINITIONS})
target_compile_options(${SIMPLEBUFFER_CLIENT_TARGET_NAME}_STATIC PRIVATE ${SIMPLEBUFFER_CLIENT_OPTIONS})
target_include_directories(${SIMPLEBUFFER_CLIENT_TARGET_NAME}_STATIC PUBLIC ${SIMPLEBUFFER_CLIENT_INCLUDE_DIRS})
target_link_libraries(${SIMPLEBUFFER_CLIENT_TARGET_NAME}_STATIC ${SIMPLEBUFFER_CLIENT_LIBS})
foreach(DEP ${SIMPLEBUFFER_CLIENT_DEPENDENCIES})
    add_dependencies(${SIMPLEBUFFER_CLIENT_TARGET_NAME}_STATIC ${DEP})
endforeach()
list_to_string(SIMPLEBUFFER_CLIENT_LINK_OPTIONS SIMPLEBUFFER_CLIENT_LINK_OPTIONS_STRING)
if (NOT "${SIMPLEBUFFER_CLIENT_LINK_OPTIONS_STRING}" STREQUAL "")
    set_target_properties(${SIMPLEBUFFER_CLIENT_TARGET_NAME}_STATIC PROPERTIES LINK_FLAGS "${SIMPLEBUFFER_CLIENT_LINK_OPTIONS_STRING}")
endif()
set_target_properties(${SIMPLEBUFFER_CLIENT_TARGET_NAME}_STATIC PROPERTIES OUTPUT_NAME ${SIMPLEBUFFER_CLIENT_TARGET_NAME})
set_target_properties(${SIMPLEBUFFER_CLIENT_TARGET_NAME}_STATIC PROPERTIES SUFFIX .la)

if (VERBOSE_BUILD)
    show_target_properties(${SIMPLEBUFFER_CLIENT_TARGET_NAME}_STATIC)
endif()

add_custom_target(uninstall_${SIMPLEBUFFER_CLIENT_TARGET_NAME}
    COMMAND ${CMAKE_COMMAND} -DCOMPONENT=${MODULE_NAME} -P ${CMAKE_CURRENT_BINARY_DIR}/uninstall.cmake
    DEPENDS ${SIMPLEBUFFER_CLIENT_TARGET_NAME}
    COMMENT "Uninstalling ${SIMPLEBUFFER_CLIENT_TARGET_NAME}")

add_custom_target(install_${SIMPLEBUFFER_CLIENT_TARGET_NAME}
    COMMAND ${CMAKE_COMMAND} -DCOMPONENT=${MODULE_NAME} -P ${CMAKE_BINARY_DIR}/cmake_install.cmake
    DEPENDS ${SIMPLEBUFFER_CLIENT_TARGET_NAME}
    COMMENT "Installing ${SIMPLEBUFFER_CLIENT_TARGET_NAME}")

install(
    TARGETS ${SIMPLEBUFFER_CLIENT_TARGET_NAME}
    DESTINATION ${CMAKE_INSTALL_PREFIX}/lib
    COMPONENT ${SIMPLEBUFFER_CLIENT_TARGET_NAME})

install(
    TARGETS ${SIMPLEBUFFER_CLIENT_TARGET_NAME}_STATIC
    DESTINATION ${CMAKE_INSTALL_PREFIX}/lib
    COMPONENT ${SIMPLEBUFFER_CLIENT_TARGET_NAME})

set(SIMPLEBUFFER_SERVER_PACKAGE_NAME westeros_simplebuffer_server)
set(SIMPLEBUFFER_SERVER_TARGET_NAME ${SIMPLEBUFFER_SERVER_PACKAGE_NAME})
set(SIMPLEBUFFER_SERVER_PACKAGE_DESCRIPTION "Westeros simple-buffer server")
set(SIMPLEBUFFER_SERVER_PACKAGE_VERSION_MAJOR 0)
set(SIMPLEBUFFER_SERVER_PACKAGE_VERSION_MINOR 0)
set(SIMPLEBUFFER_SERVER_PACKAGE_VERSION_MICRO 0)
set(SIMPLEBUFFER_SERVER_PACKAGE_VERSION ${SIMPLEBUFFER_SERVER_PACKAGE_VERSION_MAJOR}.${SIMPLEBUFFER_SERVER_PACKAGE_VERSION_MINOR}.${SIMPLEBUFFER_SERVER_PACKAGE_VERSION_MICRO})

set(SIMPLEBUFFER_SERVER_DEFINITIONS
    HAVE_CONFIG_H)

set(SIMPLEBUFFER_SERVER_INCLUDE_DIRS
    ${WAYLAND_SERVER_INCLUDE_DIR}
    simplebuffer/protocol
    )

set(SIMPLEBUFFER_SERVER_OPTIONS
    )

set(SIMPLEBUFFER_SERVER_LINK_OPTIONS
    )

set(SIMPLEBUFFER_SERVER_DEPENDENCIES
    westeros-simplebuffer-protocol)

set(SIMPLEBUFFER_SERVER_LIBS
    ${CMAKE_THREAD_LIBS_INIT}
    ${WAYLAND_CLIENT_LIBRARIES}
    ${WAYLAND_SERVER_LIBRARIES}
    ${LIB_FFI_LIBRARIES})

file(GLOB_RECURSE SIMPLEBUFFER_SERVER_INCLUDES
    simplebuffer/*.h)

set(SIMPLEBUFFER_SERVER_SOURCES
    simplebuffer/westeros-simplebuffer.cpp
    ${WESTEROS_SIMPLEBUFFER_PROTOCOL_OUTPUT_SOURCE})

set(SIMPLEBUFFER_SERVER_INPUT
    ${SIMPLEBUFFER_SERVER_SOURCES}
    ${SIMPLEBUFFER_SERVER_INCLUDES}
    )

if (BUILD_REFERENCE)
    list(APPEND SIMPLEBUFFER_SERVER_DEFINITIONS BUILD_REFERENCE=${BUILD_REFERENCE})
endif()

if (VERBOSE_BUILD)
    display_list("Defines                     : " ${SIMPLEBUFFER_SERVER_DEFINITIONS} )
    display_list("Compiler options            : " ${SIMPLEBUFFER_SERVER_OPTIONS} )
    display_list("Source files                : " ${SIMPLEBUFFER_SERVER_SOURCES} )
    display_list("Include files               : " ${SIMPLEBUFFER_SERVER_INCLUDES} )
    display_list("Include dirs                : " ${SIMPLEBUFFER_SERVER_INCLUDE_DIRS} )
    display_list("Link libs                   : " ${SIMPLEBUFFER_SERVER_LIBS} )
    display_list("Linker options              : " ${SIMPLEBUFFER_SERVER_LINK_OPTIONS} )
    display_list("Dependencies                : " ${SIMPLEBUFFER_SERVER_DEPENDENCIES} )
endif()

add_library(${SIMPLEBUFFER_SERVER_TARGET_NAME} SHARED ${SIMPLEBUFFER_SERVER_INPUT})
target_compile_definitions(${SIMPLEBUFFER_SERVER_TARGET_NAME} PRIVATE ${SIMPLEBUFFER_SERVER_DEFINITIONS})
target_compile_options(${SIMPLEBUFFER_SERVER_TARGET_NAME} PRIVATE ${SIMPLEBUFFER_SERVER_OPTIONS})
target_include_directories(${SIMPLEBUFFER_SERVER_TARGET_NAME} PUBLIC ${SIMPLEBUFFER_SERVER_INCLUDE_DIRS})
target_link_libraries(${SIMPLEBUFFER_SERVER_TARGET_NAME} ${SIMPLEBUFFER_SERVER_LIBS})
foreach(DEP ${SIMPLEBUFFER_SERVER_DEPENDENCIES})
    add_dependencies(${SIMPLEBUFFER_SERVER_TARGET_NAME} ${DEP})
endforeach()
list_to_string(SIMPLEBUFFER_SERVER_LINK_OPTIONS SIMPLEBUFFER_SERVER_LINK_OPTIONS_STRING)
if (NOT "${SIMPLEBUFFER_SERVER_LINK_OPTIONS_STRING}" STREQUAL "")
    set_target_properties(${SIMPLEBUFFER_SERVER_TARGET_NAME} PROPERTIES LINK_FLAGS "${SIMPLEBUFFER_SERVER_LINK_OPTIONS_STRING}")
endif()
set_target_properties(${SIMPLEBUFFER_SERVER_TARGET_NAME} PROPERTIES VERSION ${SIMPLEBUFFER_SERVER_PACKAGE_VERSION})
set_target_properties(${SIMPLEBUFFER_SERVER_TARGET_NAME} PROPERTIES SOVERSION ${SIMPLEBUFFER_SERVER_PACKAGE_VERSION_MAJOR})
set_target_properties(${SIMPLEBUFFER_SERVER_TARGET_NAME} PROPERTIES OUTPUT_NAME ${SIMPLEBUFFER_SERVER_TARGET_NAME})
set_target_properties(${SIMPLEBUFFER_SERVER_TARGET_NAME} PROPERTIES POSITION_INDEPENDENT_CODE ON)

if (VERBOSE_BUILD)
    show_target_properties(${SIMPLEBUFFER_SERVER_TARGET_NAME})
endif()

add_library(${SIMPLEBUFFER_SERVER_TARGET_NAME}_STATIC STATIC ${SIMPLEBUFFER_CLIENT_INPUT})
target_compile_definitions(${SIMPLEBUFFER_SERVER_TARGET_NAME}_STATIC PRIVATE ${SIMPLEBUFFER_CLIENT_DEFINITIONS})
target_compile_options(${SIMPLEBUFFER_SERVER_TARGET_NAME}_STATIC PRIVATE ${SIMPLEBUFFER_CLIENT_OPTIONS})
target_include_directories(${SIMPLEBUFFER_SERVER_TARGET_NAME}_STATIC PUBLIC ${SIMPLEBUFFER_CLIENT_INCLUDE_DIRS})
target_link_libraries(${SIMPLEBUFFER_SERVER_TARGET_NAME}_STATIC ${SIMPLEBUFFER_CLIENT_LIBS})
foreach(DEP ${SIMPLEBUFFER_SERVER_DEPENDENCIES})
    add_dependencies(${SIMPLEBUFFER_SERVER_TARGET_NAME}_STATIC ${DEP})
endforeach()
list_to_string(SIMPLEBUFFER_CLIENT_LINK_OPTIONS SIMPLEBUFFER_CLIENT_LINK_OPTIONS_STRING)
if (NOT "${SIMPLEBUFFER_CLIENT_LINK_OPTIONS_STRING}" STREQUAL "")
    set_target_properties(${SIMPLEBUFFER_SERVER_TARGET_NAME}_STATIC PROPERTIES LINK_FLAGS "${SIMPLEBUFFER_CLIENT_LINK_OPTIONS_STRING}")
endif()
set_target_properties(${SIMPLEBUFFER_SERVER_TARGET_NAME}_STATIC PROPERTIES OUTPUT_NAME ${SIMPLEBUFFER_SERVER_TARGET_NAME})
set_target_properties(${SIMPLEBUFFER_SERVER_TARGET_NAME}_STATIC PROPERTIES SUFFIX .la)

if (VERBOSE_BUILD)
    show_target_properties(${SIMPLEBUFFER_SERVER_TARGET_NAME}_STATIC)
endif()

add_custom_target(uninstall_${SIMPLEBUFFER_SERVER_TARGET_NAME}
    COMMAND ${CMAKE_COMMAND} -DCOMPONENT=${MODULE_NAME} -P ${CMAKE_CURRENT_BINARY_DIR}/uninstall.cmake
    DEPENDS ${SIMPLEBUFFER_SERVER_TARGET_NAME}
    COMMENT "Uninstalling ${SIMPLEBUFFER_SERVER_TARGET_NAME}")

add_custom_target(install_${SIMPLEBUFFER_SERVER_TARGET_NAME}
    COMMAND ${CMAKE_COMMAND} -DCOMPONENT=${MODULE_NAME} -P ${CMAKE_BINARY_DIR}/cmake_install.cmake
    DEPENDS ${SIMPLEBUFFER_SERVER_TARGET_NAME}
    COMMENT "Installing ${SIMPLEBUFFER_SERVER_TARGET_NAME}")

install(
    TARGETS ${SIMPLEBUFFER_SERVER_TARGET_NAME}
    DESTINATION ${CMAKE_INSTALL_PREFIX}/lib
    COMPONENT ${SIMPLEBUFFER_SERVER_TARGET_NAME})

install(
    TARGETS ${SIMPLEBUFFER_SERVER_TARGET_NAME}_STATIC
    DESTINATION ${CMAKE_INSTALL_PREFIX}/lib
    COMPONENT ${SIMPLEBUFFER_SERVER_TARGET_NAME})

set(SIMPLESHELL_CLIENT_PACKAGE_NAME westeros_simpleshell_client)
set(SIMPLESHELL_CLIENT_TARGET_NAME ${SIMPLESHELL_CLIENT_PACKAGE_NAME})
set(SIMPLESHELL_CLIENT_PACKAGE_DESCRIPTION "Westeros simple-shell client")
set(SIMPLESHELL_CLIENT_PACKAGE_VERSION_MAJOR 0)
set(SIMPLESHELL_CLIENT_PACKAGE_VERSION_MINOR 0)
set(SIMPLESHELL_CLIENT_PACKAGE_VERSION_MICRO 0)
set(SIMPLESHELL_CLIENT_PACKAGE_VERSION ${SIMPLESHELL_CLIENT_PACKAGE_VERSION_MAJOR}.${SIMPLESHELL_CLIENT_PACKAGE_VERSION_MINOR}.${SIMPLESHELL_CLIENT_PACKAGE_VERSION_MICRO})

set(SIMPLESHELL_CLIENT_DEFINITIONS
    HAVE_CONFIG_H)

set(SIMPLESHELL_CLIENT_INCLUDE_DIRS
    ${WAYLAND_SERVER_INCLUDE_DIR}
    simpleshell/protocol
    )

set(SIMPLESHELL_CLIENT_OPTIONS
    )

set(SIMPLESHELL_CLIENT_LINK_OPTIONS
    )

set(SIMPLESHELL_CLIENT_DEPENDENCIES
    westeros-simpleshell-protocol)

set(SIMPLESHELL_CLIENT_LIBS
    ${CMAKE_THREAD_LIBS_INIT}
    ${WAYLAND_CLIENT_LIBRARIES}
    ${LIB_FFI_LIBRARIES})

file(GLOB_RECURSE SIMPLESHELL_CLIENT_INCLUDES
    simpleshell/*.h)

set(SIMPLESHELL_CLIENT_SOURCES
    ${WESTEROS_SIMPLESHELL_PROTOCOL_OUTPUT_SOURCE})

set(SIMPLESHELL_CLIENT_INPUT
    ${SIMPLESHELL_CLIENT_SOURCES}
    ${SIMPLESHELL_CLIENT_INCLUDES}
    )

if (BUILD_REFERENCE)
    list(APPEND SIMPLESHELL_CLIENT_DEFINITIONS BUILD_REFERENCE=${BUILD_REFERENCE})
endif()

if (VERBOSE_BUILD)
    display_list("Defines                     : " ${SIMPLESHELL_CLIENT_DEFINITIONS} )
    display_list("Compiler options            : " ${SIMPLESHELL_CLIENT_OPTIONS} )
    display_list("Source files                : " ${SIMPLESHELL_CLIENT_SOURCES} )
    display_list("Include files               : " ${SIMPLESHELL_CLIENT_INCLUDES} )
    display_list("Include dirs                : " ${SIMPLESHELL_CLIENT_INCLUDE_DIRS} )
    display_list("Link libs                   : " ${SIMPLESHELL_CLIENT_LIBS} )
    display_list("Linker options              : " ${SIMPLESHELL_CLIENT_LINK_OPTIONS} )
    display_list("Dependencies                : " ${SIMPLESHELL_CLIENT_DEPENDENCIES} )
endif()

add_library(${SIMPLESHELL_CLIENT_TARGET_NAME} SHARED ${SIMPLESHELL_CLIENT_INPUT})
target_compile_definitions(${SIMPLESHELL_CLIENT_TARGET_NAME} PRIVATE ${SIMPLESHELL_CLIENT_DEFINITIONS})
target_compile_options(${SIMPLESHELL_CLIENT_TARGET_NAME} PRIVATE ${SIMPLESHELL_CLIENT_OPTIONS})
target_include_directories(${SIMPLESHELL_CLIENT_TARGET_NAME} PUBLIC ${SIMPLESHELL_CLIENT_INCLUDE_DIRS})
target_link_libraries(${SIMPLESHELL_CLIENT_TARGET_NAME} ${SIMPLESHELL_CLIENT_LIBS})
foreach(DEP ${SIMPLESHELL_CLIENT_DEPENDENCIES})
    add_dependencies(${SIMPLESHELL_CLIENT_TARGET_NAME} ${DEP})
endforeach()
list_to_string(SIMPLESHELL_CLIENT_LINK_OPTIONS SIMPLESHELL_CLIENT_LINK_OPTIONS_STRING)
if (NOT "${SIMPLESHELL_CLIENT_LINK_OPTIONS_STRING}" STREQUAL "")
    set_target_properties(${SIMPLESHELL_CLIENT_TARGET_NAME} PROPERTIES LINK_FLAGS "${SIMPLESHELL_CLIENT_LINK_OPTIONS_STRING}")
endif()
set_target_properties(${SIMPLESHELL_CLIENT_TARGET_NAME} PROPERTIES VERSION ${SIMPLESHELL_CLIENT_PACKAGE_VERSION})
set_target_properties(${SIMPLESHELL_CLIENT_TARGET_NAME} PROPERTIES SOVERSION ${SIMPLESHELL_CLIENT_PACKAGE_VERSION_MAJOR})
set_target_properties(${SIMPLESHELL_CLIENT_TARGET_NAME} PROPERTIES OUTPUT_NAME ${SIMPLESHELL_CLIENT_TARGET_NAME})
set_target_properties(${SIMPLESHELL_CLIENT_TARGET_NAME} PROPERTIES POSITION_INDEPENDENT_CODE ON)

if (VERBOSE_BUILD)
    show_target_properties(${SIMPLESHELL_CLIENT_TARGET_NAME})
endif()

add_library(${SIMPLESHELL_CLIENT_TARGET_NAME}_STATIC STATIC ${SIMPLESHELL_CLIENT_INPUT})
target_compile_definitions(${SIMPLESHELL_CLIENT_TARGET_NAME}_STATIC PRIVATE ${SIMPLESHELL_CLIENT_DEFINITIONS})
target_compile_options(${SIMPLESHELL_CLIENT_TARGET_NAME}_STATIC PRIVATE ${SIMPLESHELL_CLIENT_OPTIONS})
target_include_directories(${SIMPLESHELL_CLIENT_TARGET_NAME}_STATIC PUBLIC ${SIMPLESHELL_CLIENT_INCLUDE_DIRS})
target_link_libraries(${SIMPLESHELL_CLIENT_TARGET_NAME}_STATIC ${SIMPLESHELL_CLIENT_LIBS})
foreach(DEP ${SIMPLESHELL_CLIENT_DEPENDENCIES})
    add_dependencies(${SIMPLESHELL_CLIENT_TARGET_NAME}_STATIC ${DEP})
endforeach()
list_to_string(SIMPLESHELL_CLIENT_LINK_OPTIONS SIMPLESHELL_CLIENT_LINK_OPTIONS_STRING)
if (NOT "${SIMPLESHELL_CLIENT_LINK_OPTIONS_STRING}" STREQUAL "")
    set_target_properties(${SIMPLESHELL_CLIENT_TARGET_NAME}_STATIC PROPERTIES LINK_FLAGS "${SIMPLESHELL_CLIENT_LINK_OPTIONS_STRING}")
endif()
set_target_properties(${SIMPLESHELL_CLIENT_TARGET_NAME}_STATIC PROPERTIES OUTPUT_NAME ${SIMPLESHELL_CLIENT_TARGET_NAME})
set_target_properties(${SIMPLESHELL_CLIENT_TARGET_NAME}_STATIC PROPERTIES SUFFIX .la)

if (VERBOSE_BUILD)
    show_target_properties(${SIMPLESHELL_CLIENT_TARGET_NAME}_STATIC)
endif()

add_custom_target(uninstall_${SIMPLESHELL_CLIENT_TARGET_NAME}
    COMMAND ${CMAKE_COMMAND} -DCOMPONENT=${MODULE_NAME} -P ${CMAKE_CURRENT_BINARY_DIR}/uninstall.cmake
    DEPENDS ${SIMPLESHELL_CLIENT_TARGET_NAME}
    COMMENT "Uninstalling ${SIMPLESHELL_CLIENT_TARGET_NAME}")

add_custom_target(install_${SIMPLESHELL_CLIENT_TARGET_NAME}
    COMMAND ${CMAKE_COMMAND} -DCOMPONENT=${MODULE_NAME} -P ${CMAKE_BINARY_DIR}/cmake_install.cmake
    DEPENDS ${SIMPLESHELL_CLIENT_TARGET_NAME}
    COMMENT "Installing ${SIMPLESHELL_CLIENT_TARGET_NAME}")

install(
    TARGETS ${SIMPLESHELL_CLIENT_TARGET_NAME}
    DESTINATION ${CMAKE_INSTALL_PREFIX}/lib
    COMPONENT ${SIMPLESHELL_CLIENT_TARGET_NAME})

install(
    TARGETS ${SIMPLESHELL_CLIENT_TARGET_NAME}_STATIC
    DESTINATION ${CMAKE_INSTALL_PREFIX}/lib
    COMPONENT ${SIMPLESHELL_CLIENT_TARGET_NAME})

set(SIMPLESHELL_SERVER_PACKAGE_NAME westeros_simpleshell_server)
set(SIMPLESHELL_SERVER_TARGET_NAME ${SIMPLESHELL_SERVER_PACKAGE_NAME})
set(SIMPLESHELL_SERVER_PACKAGE_DESCRIPTION "Westeros simple-buffer server")
set(SIMPLESHELL_SERVER_PACKAGE_VERSION_MAJOR 0)
set(SIMPLESHELL_SERVER_PACKAGE_VERSION_MINOR 0)
set(SIMPLESHELL_SERVER_PACKAGE_VERSION_MICRO 0)
set(SIMPLESHELL_SERVER_PACKAGE_VERSION ${SIMPLESHELL_SERVER_PACKAGE_VERSION_MAJOR}.${SIMPLESHELL_SERVER_PACKAGE_VERSION_MINOR}.${SIMPLESHELL_SERVER_PACKAGE_VERSION_MICRO})

set(SIMPLESHELL_SERVER_DEFINITIONS
    HAVE_CONFIG_H)

set(SIMPLESHELL_SERVER_INCLUDE_DIRS
    ${WAYLAND_SERVER_INCLUDE_DIR}
    simpleshell/protocol
    )

set(SIMPLESHELL_SERVER_OPTIONS
    )

set(SIMPLESHELL_SERVER_LINK_OPTIONS
    )

set(SIMPLESHELL_SERVER_DEPENDENCIES
    westeros-simpleshell-protocol)

set(SIMPLESHELL_SERVER_LIBS
    ${CMAKE_THREAD_LIBS_INIT}
    ${WAYLAND_CLIENT_LIBRARIES}
    ${WAYLAND_SERVER_LIBRARIES}
    ${LIB_FFI_LIBRARIES})

file(GLOB_RECURSE SIMPLESHELL_SERVER_INCLUDES
    simpleshell/*.h)

set(SIMPLESHELL_SERVER_SOURCES
    simpleshell/westeros-simpleshell.cpp
    ${WESTEROS_SIMPLESHELL_PROTOCOL_OUTPUT_SOURCE})

set(SIMPLESHELL_SERVER_INPUT
    ${SIMPLESHELL_SERVER_SOURCES}
    ${SIMPLESHELL_SERVER_INCLUDES}
    )

if (BUILD_REFERENCE)
    list(APPEND SIMPLESHELL_SERVER_DEFINITIONS BUILD_REFERENCE=${BUILD_REFERENCE})
endif()

if (VERBOSE_BUILD)
    display_list("Defines                     : " ${SIMPLESHELL_SERVER_DEFINITIONS} )
    display_list("Compiler options            : " ${SIMPLESHELL_SERVER_OPTIONS} )
    display_list("Source files                : " ${SIMPLESHELL_SERVER_SOURCES} )
    display_list("Include files               : " ${SIMPLESHELL_SERVER_INCLUDES} )
    display_list("Include dirs                : " ${SIMPLESHELL_SERVER_INCLUDE_DIRS} )
    display_list("Link libs                   : " ${SIMPLESHELL_SERVER_LIBS} )
    display_list("Linker options              : " ${SIMPLESHELL_SERVER_LINK_OPTIONS} )
    display_list("Dependencies                : " ${SIMPLESHELL_SERVER_DEPENDENCIES} )
endif()

add_library(${SIMPLESHELL_SERVER_TARGET_NAME} SHARED ${SIMPLESHELL_SERVER_INPUT})
target_compile_definitions(${SIMPLESHELL_SERVER_TARGET_NAME} PRIVATE ${SIMPLESHELL_SERVER_DEFINITIONS})
target_compile_options(${SIMPLESHELL_SERVER_TARGET_NAME} PRIVATE ${SIMPLESHELL_SERVER_OPTIONS})
target_include_directories(${SIMPLESHELL_SERVER_TARGET_NAME} PUBLIC ${SIMPLESHELL_SERVER_INCLUDE_DIRS})
target_link_libraries(${SIMPLESHELL_SERVER_TARGET_NAME} ${SIMPLESHELL_SERVER_LIBS})
foreach(DEP ${SIMPLESHELL_SERVER_DEPENDENCIES})
    add_dependencies(${SIMPLESHELL_SERVER_TARGET_NAME} ${DEP})
endforeach()
list_to_string(SIMPLESHELL_SERVER_LINK_OPTIONS SIMPLESHELL_SERVER_LINK_OPTIONS_STRING)
if (NOT "${SIMPLESHELL_SERVER_LINK_OPTIONS_STRING}" STREQUAL "")
    set_target_properties(${SIMPLESHELL_SERVER_TARGET_NAME} PROPERTIES LINK_FLAGS "${SIMPLESHELL_SERVER_LINK_OPTIONS_STRING}")
endif()
set_target_properties(${SIMPLESHELL_SERVER_TARGET_NAME} PROPERTIES VERSION ${SIMPLESHELL_SERVER_PACKAGE_VERSION})
set_target_properties(${SIMPLESHELL_SERVER_TARGET_NAME} PROPERTIES SOVERSION ${SIMPLESHELL_SERVER_PACKAGE_VERSION_MAJOR})
set_target_properties(${SIMPLESHELL_SERVER_TARGET_NAME} PROPERTIES OUTPUT_NAME ${SIMPLESHELL_SERVER_TARGET_NAME})
set_target_properties(${SIMPLESHELL_SERVER_TARGET_NAME} PROPERTIES POSITION_INDEPENDENT_CODE ON)

if (VERBOSE_BUILD)
    show_target_properties(${SIMPLESHELL_SERVER_TARGET_NAME})
endif()

add_library(${SIMPLESHELL_SERVER_TARGET_NAME}_STATIC STATIC ${SIMPLESHELL_CLIENT_INPUT})
target_compile_definitions(${SIMPLESHELL_SERVER_TARGET_NAME}_STATIC PRIVATE ${SIMPLESHELL_CLIENT_DEFINITIONS})
target_compile_options(${SIMPLESHELL_SERVER_TARGET_NAME}_STATIC PRIVATE ${SIMPLESHELL_CLIENT_OPTIONS})
target_include_directories(${SIMPLESHELL_SERVER_TARGET_NAME}_STATIC PUBLIC ${SIMPLESHELL_CLIENT_INCLUDE_DIRS})
target_link_libraries(${SIMPLESHELL_SERVER_TARGET_NAME}_STATIC ${SIMPLESHELL_CLIENT_LIBS})
foreach(DEP ${SIMPLESHELL_SERVER_DEPENDENCIES})
    add_dependencies(${SIMPLESHELL_SERVER_TARGET_NAME}_STATIC ${DEP})
endforeach()
list_to_string(SIMPLESHELL_CLIENT_LINK_OPTIONS SIMPLESHELL_CLIENT_LINK_OPTIONS_STRING)
if (NOT "${SIMPLESHELL_CLIENT_LINK_OPTIONS_STRING}" STREQUAL "")
    set_target_properties(${SIMPLESHELL_SERVER_TARGET_NAME}_STATIC PROPERTIES LINK_FLAGS "${SIMPLESHELL_CLIENT_LINK_OPTIONS_STRING}")
endif()
set_target_properties(${SIMPLESHELL_SERVER_TARGET_NAME}_STATIC PROPERTIES OUTPUT_NAME ${SIMPLESHELL_SERVER_TARGET_NAME})
set_target_properties(${SIMPLESHELL_SERVER_TARGET_NAME}_STATIC PROPERTIES SUFFIX .la)

if (VERBOSE_BUILD)
    show_target_properties(${SIMPLESHELL_SERVER_TARGET_NAME}_STATIC)
endif()

add_custom_target(uninstall_${SIMPLESHELL_SERVER_TARGET_NAME}
    COMMAND ${CMAKE_COMMAND} -DCOMPONENT=${MODULE_NAME} -P ${CMAKE_CURRENT_BINARY_DIR}/uninstall.cmake
    DEPENDS ${SIMPLESHELL_SERVER_TARGET_NAME}
    COMMENT "Uninstalling ${SIMPLESHELL_SERVER_TARGET_NAME}")

add_custom_target(install_${SIMPLESHELL_SERVER_TARGET_NAME}
    COMMAND ${CMAKE_COMMAND} -DCOMPONENT=${MODULE_NAME} -P ${CMAKE_BINARY_DIR}/cmake_install.cmake
    DEPENDS ${SIMPLESHELL_SERVER_TARGET_NAME}
    COMMENT "Installing ${SIMPLESHELL_SERVER_TARGET_NAME}")

install(
    TARGETS ${SIMPLESHELL_SERVER_TARGET_NAME}
    DESTINATION ${CMAKE_INSTALL_PREFIX}/lib
    COMPONENT ${SIMPLESHELL_SERVER_TARGET_NAME})

install(
    TARGETS ${SIMPLESHELL_SERVER_TARGET_NAME}_STATIC
    DESTINATION ${CMAKE_INSTALL_PREFIX}/lib
    COMPONENT ${SIMPLESHELL_SERVER_TARGET_NAME})

set(WESTEROS_SOC_PACKAGE_NAME westeros_gl)
set(WESTEROS_SOC_TARGET_NAME ${WESTEROS_SOC_PACKAGE_NAME})
set(WESTEROS_SOC_PACKAGE_DESCRIPTION "Westeros SoC specific gl interface")
set(WESTEROS_SOC_PACKAGE_VERSION_MAJOR 0)
set(WESTEROS_SOC_PACKAGE_VERSION_MINOR 0)
set(WESTEROS_SOC_PACKAGE_VERSION_MICRO 0)
set(WESTEROS_SOC_PACKAGE_VERSION ${WESTEROS_SOC_PACKAGE_VERSION_MAJOR}.${WESTEROS_SOC_PACKAGE_VERSION_MINOR}.${WESTEROS_SOC_PACKAGE_VERSION_MICRO})

set(WESTEROS_SOC_DEFINITIONS
    HAVE_CONFIG_H
    LINUX
    EGL_API_FB
    )

set(WESTEROS_SOC_INCLUDE_DIRS
    ${EGL_INCLUDE_DIRECTORY}
    )

set(WESTEROS_SOC_OPTIONS
    )

set(WESTEROS_SOC_LINK_OPTIONS
    )

set(WESTEROS_SOC_DEPENDENCIES
    )

set(WESTEROS_SOC_LIBS
    ${CMAKE_THREAD_LIBS_INIT}
    ${EGL_LIBRARIES}
    ${WESTEROS_SOC_DEPENDENCIES})

if(SYNAPTICS_PLATFORM)
    file(GLOB_RECURSE WESTEROS_SOC_INCLUDES
        syna/westeros-gl/*.h)
elseif(RPI_PLATFORM)
    file(GLOB_RECURSE WESTEROS_SOC_INCLUDES
        rpi/westeros-gl/*.h)
elseif(X86_64_PLATFORM)
else()
endif()

set(WESTEROS_SOC_SOURCES
    )
if(SYNAPTICS_PLATFORM)
    list(APPEND WESTEROS_SOC_SOURCES syna/westeros-gl/westeros-gl.cpp)
elseif(RPI_PLATFORM)
    list(APPEND WESTEROS_SOC_SOURCES rpi/westeros-gl/westeros-gl.cpp)
elseif(X86_64_PLATFORM)
else()
endif()

set(WESTEROS_SOC_INPUT
    ${WESTEROS_SOC_SOURCES}
    ${WESTEROS_SOC_INCLUDES}
    )

if (BUILD_REFERENCE)
    list(APPEND WESTEROS_SOC_DEFINITIONS BUILD_REFERENCE=${BUILD_REFERENCE})
endif()

if (VERBOSE_BUILD)
    display_list("Defines                     : " ${WESTEROS_SOC_DEFINITIONS} )
    display_list("Compiler options            : " ${WESTEROS_SOC_OPTIONS} )
    display_list("Source files                : " ${WESTEROS_SOC_SOURCES} )
    display_list("Include files               : " ${WESTEROS_SOC_INCLUDES} )
    display_list("Include dirs                : " ${WESTEROS_SOC_INCLUDE_DIRS} )
    display_list("Link libs                   : " ${WESTEROS_SOC_LIBS} )
    display_list("Linker options              : " ${WESTEROS_SOC_LINK_OPTIONS} )
    display_list("Dependencies                : " ${WESTEROS_SOC_DEPENDENCIES} )
endif()

add_library(${WESTEROS_SOC_TARGET_NAME} SHARED ${WESTEROS_SOC_INPUT})
target_compile_definitions(${WESTEROS_SOC_TARGET_NAME} PRIVATE ${WESTEROS_SOC_DEFINITIONS})
target_compile_options(${WESTEROS_SOC_TARGET_NAME} PRIVATE ${WESTEROS_SOC_OPTIONS})
target_include_directories(${WESTEROS_SOC_TARGET_NAME} PUBLIC ${WESTEROS_SOC_INCLUDE_DIRS})
target_link_libraries(${WESTEROS_SOC_TARGET_NAME} ${WESTEROS_SOC_LIBS})
foreach(DEP ${WESTEROS_SOC_DEPENDENCIES})
    add_dependencies(${WESTEROS_SOC_TARGET_NAME} ${DEP})
endforeach()
list_to_string(WESTEROS_SOC_LINK_OPTIONS WESTEROS_SOC_LINK_OPTIONS_STRING)
if (NOT "${WESTEROS_SOC_LINK_OPTIONS_STRING}" STREQUAL "")
    set_target_properties(${WESTEROS_SOC_TARGET_NAME} PROPERTIES LINK_FLAGS "${WESTEROS_SOC_LINK_OPTIONS_STRING}")
endif()
set_target_properties(${WESTEROS_SOC_TARGET_NAME} PROPERTIES VERSION ${WESTEROS_SOC_PACKAGE_VERSION})
set_target_properties(${WESTEROS_SOC_TARGET_NAME} PROPERTIES SOVERSION ${WESTEROS_SOC_PACKAGE_VERSION_MAJOR})
set_target_properties(${WESTEROS_SOC_TARGET_NAME} PROPERTIES OUTPUT_NAME ${WESTEROS_SOC_TARGET_NAME})
set_target_properties(${WESTEROS_SOC_TARGET_NAME} PROPERTIES POSITION_INDEPENDENT_CODE ON)

if (VERBOSE_BUILD)
    show_target_properties(${WESTEROS_SOC_TARGET_NAME})
endif()

add_library(${WESTEROS_SOC_TARGET_NAME}_STATIC STATIC ${WESTEROS_SOC_INPUT})
target_compile_definitions(${WESTEROS_SOC_TARGET_NAME}_STATIC PRIVATE ${WESTEROS_SOC_DEFINITIONS})
target_compile_options(${WESTEROS_SOC_TARGET_NAME}_STATIC PRIVATE ${WESTEROS_SOC_OPTIONS})
target_include_directories(${WESTEROS_SOC_TARGET_NAME}_STATIC PUBLIC ${WESTEROS_SOC_INCLUDE_DIRS})
target_link_libraries(${WESTEROS_SOC_TARGET_NAME}_STATIC ${WESTEROS_SOC_LIBS})
foreach(DEP ${WESTEROS_SOC_DEPENDENCIES})
    add_dependencies(${WESTEROS_SOC_TARGET_NAME}_STATIC ${DEP})
endforeach()
list_to_string(WESTEROS_SOC_LINK_OPTIONS WESTEROS_SOC_LINK_OPTIONS_STRING)
if (NOT "${WESTEROS_SOC_LINK_OPTIONS_STRING}" STREQUAL "")
    set_target_properties(${WESTEROS_SOC_TARGET_NAME}_STATIC PROPERTIES LINK_FLAGS "${WESTEROS_SOC_LINK_OPTIONS_STRING}")
endif()
set_target_properties(${WESTEROS_SOC_TARGET_NAME}_STATIC PROPERTIES OUTPUT_NAME ${WESTEROS_SOC_TARGET_NAME})
set_target_properties(${WESTEROS_SOC_TARGET_NAME}_STATIC PROPERTIES SUFFIX .la)

if (VERBOSE_BUILD)
    show_target_properties(${WESTEROS_SOC_TARGET_NAME}_STATIC)
endif()

add_custom_target(uninstall_${WESTEROS_SOC_TARGET_NAME}
    COMMAND ${CMAKE_COMMAND} -DCOMPONENT=${MODULE_NAME} -P ${CMAKE_CURRENT_BINARY_DIR}/uninstall.cmake
    DEPENDS ${WESTEROS_SOC_TARGET_NAME}
    COMMENT "Uninstalling ${WESTEROS_SOC_TARGET_NAME}")

add_custom_target(install_${WESTEROS_SOC_TARGET_NAME}
    COMMAND ${CMAKE_COMMAND} -DCOMPONENT=${MODULE_NAME} -P ${CMAKE_BINARY_DIR}/cmake_install.cmake
    DEPENDS ${WESTEROS_SOC_TARGET_NAME}
    COMMENT "Installing ${WESTEROS_SOC_TARGET_NAME}")

install(
    TARGETS ${WESTEROS_SOC_TARGET_NAME}
    DESTINATION ${CMAKE_INSTALL_PREFIX}/lib
    COMPONENT ${WESTEROS_SOC_TARGET_NAME})

install(
    TARGETS ${WESTEROS_SOC_TARGET_NAME}_STATIC
    DESTINATION ${CMAKE_INSTALL_PREFIX}/lib
    COMPONENT ${WESTEROS_SOC_TARGET_NAME})

set(WESTEROS_RENDER_GL_PACKAGE_NAME westeros_render_gl)
set(WESTEROS_RENDER_GL_TARGET_NAME ${WESTEROS_RENDER_GL_PACKAGE_NAME})
set(WESTEROS_RENDER_GL_PACKAGE_DESCRIPTION "Westeros GL renderer")
set(WESTEROS_RENDER_GL_PACKAGE_VERSION_MAJOR 0)
set(WESTEROS_RENDER_GL_PACKAGE_VERSION_MINOR 0)
set(WESTEROS_RENDER_GL_PACKAGE_VERSION_MICRO 0)
set(WESTEROS_RENDER_GL_PACKAGE_VERSION ${WESTEROS_RENDER_GL_PACKAGE_VERSION_MAJOR}.${WESTEROS_RENDER_GL_PACKAGE_VERSION_MINOR}.${WESTEROS_RENDER_GL_PACKAGE_VERSION_MICRO})

set(WESTEROS_RENDER_GL_DEFINITIONS
    HAVE_CONFIG_H
    WESTEROS_PLATFORM_EMBEDDED
    WESTEROS_HAVE_WAYLAND_EGL
    ENABLE_SBPROTOCOL
    USE_XDG_VERSION5
    VCX=3)
if (SYNAPTICS_PLATFORM)
    list(APPEND WESTEROS_RENDER_GL_DEFINITIONS
        LINUX
        EGL_API_FB)
elseif(RPI_PLATFORM)
    list(APPEND WESTEROS_RENDER_GL_DEFINITIONS
        WESTEROS_PLATFORM_RPI
        WESTEROS_INVERTED_Y
        BUILD_WAYLAND)
elseif(X86_64_PLATFORM)
    list(APPEND WESTEROS_RENDER_GL_DEFINITIONS
        )
else()
    message(ERROR "Unsupported platform")
endif()

set(WESTEROS_RENDER_GL_INCLUDE_DIRS
    ./simplebuffer
    ${EGL_INCLUDE_DIRECTORY}
    )
if (SYNAPTICS_PLATFORM)
    list(APPEND WESTEROS_RENDER_GL_INCLUDE_DIRS
        ./syna/westeros-gl)
elseif(RPI_PLATFORM)
    list(APPEND WESTEROS_RENDER_GL_INCLUDE_DIRS
        ./rpi/westeros-gl)
elseif(X86_64_PLATFORM)
    list(APPEND WESTEROS_RENDER_GL_INCLUDE_DIRS
        ./drm/westeros-gl)
else()
    message(ERROR "Unsupported platform")
endif()

set(WESTEROS_RENDER_GL_OPTIONS
    )

set(WESTEROS_RENDER_GL_LINK_OPTIONS
    )

set(WESTEROS_RENDER_GL_DEPENDENCIES
    )

set(WESTEROS_RENDER_GL_LIBS
    ${CMAKE_THREAD_LIBS_INIT}
    ${EGL_LIBRARIES}
    ${OPENGLES2_LIBRARIES}
    ${WAYLAND_SERVER_LIBRARIES}
    ${WAYLAND_EGL_LIBRARIES}
    ${WESTEROS_RENDER_GL_DEPENDENCIES})

file(GLOB WESTEROS_RENDER_GL_INCLUDES
    *.h)

set(WESTEROS_RENDER_GL_SOURCES
    westeros-render-gl.cpp
)

set(WESTEROS_RENDER_GL_INPUT
    ${WESTEROS_RENDER_GL_SOURCES}
    ${WESTEROS_RENDER_GL_INCLUDES}
    )

if (BUILD_REFERENCE)
    list(APPEND WESTEROS_RENDER_GL_DEFINITIONS BUILD_REFERENCE=${BUILD_REFERENCE})
endif()

if (VERBOSE_BUILD)
    display_list("Defines                     : " ${WESTEROS_RENDER_GL_DEFINITIONS} )
    display_list("Compiler options            : " ${WESTEROS_RENDER_GL_OPTIONS} )
    display_list("Source files                : " ${WESTEROS_RENDER_GL_SOURCES} )
    display_list("Include files               : " ${WESTEROS_RENDER_GL_INCLUDES} )
    display_list("Include dirs                : " ${WESTEROS_RENDER_GL_INCLUDE_DIRS} )
    display_list("Link libs                   : " ${WESTEROS_RENDER_GL_LIBS} )
    display_list("Linker options              : " ${WESTEROS_RENDER_GL_LINK_OPTIONS} )
    display_list("Dependencies                : " ${WESTEROS_RENDER_GL_DEPENDENCIES} )
endif()

add_library(${WESTEROS_RENDER_GL_TARGET_NAME} SHARED ${WESTEROS_RENDER_GL_INPUT})
target_compile_definitions(${WESTEROS_RENDER_GL_TARGET_NAME} PRIVATE ${WESTEROS_RENDER_GL_DEFINITIONS})
target_compile_options(${WESTEROS_RENDER_GL_TARGET_NAME} PRIVATE ${WESTEROS_RENDER_GL_OPTIONS})
target_include_directories(${WESTEROS_RENDER_GL_TARGET_NAME} PUBLIC ${WESTEROS_RENDER_GL_INCLUDE_DIRS})
target_link_libraries(${WESTEROS_RENDER_GL_TARGET_NAME} ${WESTEROS_RENDER_GL_LIBS})
foreach(DEP ${WESTEROS_RENDER_GL_DEPENDENCIES})
    add_dependencies(${WESTEROS_RENDER_GL_TARGET_NAME} ${DEP})
endforeach()
list_to_string(WESTEROS_RENDER_GL_LINK_OPTIONS WESTEROS_RENDER_GL_LINK_OPTIONS_STRING)
if (NOT "${WESTEROS_RENDER_GL_LINK_OPTIONS_STRING}" STREQUAL "")
    set_target_properties(${WESTEROS_RENDER_GL_TARGET_NAME} PROPERTIES LINK_FLAGS "${WESTEROS_RENDER_GL_LINK_OPTIONS_STRING}")
endif()
set_target_properties(${WESTEROS_RENDER_GL_TARGET_NAME} PROPERTIES VERSION ${WESTEROS_RENDER_GL_PACKAGE_VERSION})
set_target_properties(${WESTEROS_RENDER_GL_TARGET_NAME} PROPERTIES SOVERSION ${WESTEROS_RENDER_GL_PACKAGE_VERSION_MAJOR})
set_target_properties(${WESTEROS_RENDER_GL_TARGET_NAME} PROPERTIES OUTPUT_NAME ${WESTEROS_RENDER_GL_TARGET_NAME})
set_target_properties(${WESTEROS_RENDER_GL_TARGET_NAME} PROPERTIES POSITION_INDEPENDENT_CODE ON)

if (VERBOSE_BUILD)
    show_target_properties(${WESTEROS_RENDER_GL_TARGET_NAME})
endif()

add_library(${WESTEROS_RENDER_GL_TARGET_NAME}_STATIC STATIC ${WESTEROS_RENDER_GL_INPUT})
target_compile_definitions(${WESTEROS_RENDER_GL_TARGET_NAME}_STATIC PRIVATE ${WESTEROS_RENDER_GL_DEFINITIONS})
target_compile_options(${WESTEROS_RENDER_GL_TARGET_NAME}_STATIC PRIVATE ${WESTEROS_RENDER_GL_OPTIONS})
target_include_directories(${WESTEROS_RENDER_GL_TARGET_NAME}_STATIC PUBLIC ${WESTEROS_RENDER_GL_INCLUDE_DIRS})
target_link_libraries(${WESTEROS_RENDER_GL_TARGET_NAME}_STATIC ${WESTEROS_RENDER_GL_LIBS})
foreach(DEP ${WESTEROS_RENDER_GL_DEPENDENCIES})
    add_dependencies(${WESTEROS_RENDER_GL_TARGET_NAME}_STATIC ${DEP})
endforeach()
list_to_string(WESTEROS_RENDER_GL_LINK_OPTIONS WESTEROS_RENDER_GL_LINK_OPTIONS_STRING)
if (NOT "${WESTEROS_RENDER_GL_LINK_OPTIONS_STRING}" STREQUAL "")
    set_target_properties(${WESTEROS_RENDER_GL_TARGET_NAME}_STATIC PROPERTIES LINK_FLAGS "${WESTEROS_RENDER_GL_LINK_OPTIONS_STRING}")
endif()
set_target_properties(${WESTEROS_RENDER_GL_TARGET_NAME}_STATIC PROPERTIES OUTPUT_NAME ${WESTEROS_RENDER_GL_TARGET_NAME})
set_target_properties(${WESTEROS_RENDER_GL_TARGET_NAME}_STATIC PROPERTIES SUFFIX .la)

if (VERBOSE_BUILD)
    show_target_properties(${WESTEROS_RENDER_GL_TARGET_NAME}_STATIC)
endif()

add_custom_target(uninstall_${WESTEROS_RENDER_GL_TARGET_NAME}
    COMMAND ${CMAKE_COMMAND} -DCOMPONENT=${MODULE_NAME} -P ${CMAKE_CURRENT_BINARY_DIR}/uninstall.cmake
    DEPENDS ${WESTEROS_RENDER_GL_TARGET_NAME}
    COMMENT "Uninstalling ${WESTEROS_RENDER_GL_TARGET_NAME}")

add_custom_target(install_${WESTEROS_RENDER_GL_TARGET_NAME}
    COMMAND ${CMAKE_COMMAND} -DCOMPONENT=${MODULE_NAME} -P ${CMAKE_BINARY_DIR}/cmake_install.cmake
    DEPENDS ${WESTEROS_RENDER_GL_TARGET_NAME}
    COMMENT "Installing ${WESTEROS_RENDER_GL_TARGET_NAME}")

install(
    TARGETS ${WESTEROS_RENDER_GL_TARGET_NAME}
    DESTINATION ${CMAKE_INSTALL_PREFIX}/lib
    COMPONENT ${WESTEROS_RENDER_GL_TARGET_NAME})

install(
    TARGETS ${WESTEROS_RENDER_GL_TARGET_NAME}_STATIC
    DESTINATION ${CMAKE_INSTALL_PREFIX}/lib
    COMPONENT ${WESTEROS_RENDER_GL_TARGET_NAME})

set(WESTEROS_RENDER_EMBEDDED_PACKAGE_NAME westeros_render_embedded)
set(WESTEROS_RENDER_EMBEDDED_TARGET_NAME ${WESTEROS_RENDER_EMBEDDED_PACKAGE_NAME})
set(WESTEROS_RENDER_EMBEDDED_PACKAGE_DESCRIPTION "Westeros embedded renderer")
set(WESTEROS_RENDER_EMBEDDED_PACKAGE_VERSION_MAJOR 0)
set(WESTEROS_RENDER_EMBEDDED_PACKAGE_VERSION_MINOR 0)
set(WESTEROS_RENDER_EMBEDDED_PACKAGE_VERSION_MICRO 0)
set(WESTEROS_RENDER_EMBEDDED_PACKAGE_VERSION ${WESTEROS_RENDER_EMBEDDED_PACKAGE_VERSION_MAJOR}.${WESTEROS_RENDER_EMBEDDED_PACKAGE_VERSION_MINOR}.${WESTEROS_RENDER_EMBEDDED_PACKAGE_VERSION_MICRO})

set(WESTEROS_RENDER_EMBEDDED_DEFINITIONS
    HAVE_CONFIG_H
    WESTEROS_PLATFORM_EMBEDDED
    WESTEROS_HAVE_WAYLAND_EGL
    ENABLE_SBPROTOCOL
    USE_XDG_VERSION5
    VCX=3)
if (SYNAPTICS_PLATFORM)
    list(APPEND WESTEROS_RENDER_EMBEDDED_DEFINITIONS
        LINUX
        EGL_API_FB)
elseif(RPI_PLATFORM)
    list(APPEND WESTEROS_RENDER_EMBEDDED_DEFINITIONS
        WESTEROS_PLATFORM_RPI
        WESTEROS_INVERTED_Y
        BUILD_WAYLAND)
elseif(X86_64_PLATFORM)
    list(APPEND WESTEROS_RENDER_EMBEDDED_DEFINITIONS
        )
else()
    message(ERROR "Unsupported platform")
endif()

set(WESTEROS_RENDER_EMBEDDED_INCLUDE_DIRS
    ./simplebuffer
    ${EGL_INCLUDE_DIRECTORY}
    )
if (SYNAPTICS_PLATFORM)
    list(APPEND WESTEROS_RENDER_EMBEDDED_INCLUDE_DIRS
        ./syna/westeros-gl)
elseif(RPI_PLATFORM)
    list(APPEND WESTEROS_RENDER_EMBEDDED_INCLUDE_DIRS
        ./rpi/westeros-gl)
elseif(X86_64_PLATFORM)
    list(APPEND WESTEROS_RENDER_EMBEDDED_INCLUDE_DIRS
        ./drm/westeros-gl)
else()
    message(ERROR "Unsupported platform")
endif()

set(WESTEROS_RENDER_EMBEDDED_OPTIONS
    )

set(WESTEROS_RENDER_EMBEDDED_LINK_OPTIONS
    )

set(WESTEROS_RENDER_EMBEDDED_DEPENDENCIES
    )

set(WESTEROS_RENDER_EMBEDDED_LIBS
    ${CMAKE_THREAD_LIBS_INIT}
    ${EGL_LIBRARIES}
    ${OPENGLES2_LIBRARIES}
    ${WAYLAND_SERVER_LIBRARIES}
    ${WESTEROS_RENDER_EMBEDDED_DEPENDENCIES})

file(GLOB WESTEROS_RENDER_EMBEDDED_INCLUDES
    *.h)
file(GLOB WESTEROS_RENDER_EMBEDDED_INCLUDES_PROTOCOL
    protocol/*.h)
file(GLOB WESTEROS_RENDER_EMBEDDED_INCLUDES_PROTOCOL_XDGSHELL
    protocol/version5/*.h)
list(APPEND WESTEROS_RENDER_EMBEDDED_INCLUDES ${WESTEROS_RENDER_EMBEDDED_INCLUDES_PROTOCOL})
list(APPEND WESTEROS_RENDER_EMBEDDED_INCLUDES ${WESTEROS_RENDER_EMBEDDED_INCLUDES_PROTOCOL_XDGSHELL})

set(WESTEROS_RENDER_EMBEDDED_SOURCES
    westeros-render-embedded.cpp)

set(WESTEROS_RENDER_EMBEDDED_INPUT
    ${WESTEROS_RENDER_EMBEDDED_SOURCES}
    ${WESTEROS_RENDER_EMBEDDED_INCLUDES}
    )

if (BUILD_REFERENCE)
    list(APPEND WESTEROS_RENDER_EMBEDDED_DEFINITIONS BUILD_REFERENCE=${BUILD_REFERENCE})
endif()

if (VERBOSE_BUILD)
    display_list("Defines                     : " ${WESTEROS_RENDER_EMBEDDED_DEFINITIONS} )
    display_list("Compiler options            : " ${WESTEROS_RENDER_EMBEDDED_OPTIONS} )
    display_list("Source files                : " ${WESTEROS_RENDER_EMBEDDED_SOURCES} )
    display_list("Include files               : " ${WESTEROS_RENDER_EMBEDDED_INCLUDES} )
    display_list("Include dirs                : " ${WESTEROS_RENDER_EMBEDDED_INCLUDE_DIRS} )
    display_list("Link libs                   : " ${WESTEROS_RENDER_EMBEDDED_LIBS} )
    display_list("Linker options              : " ${WESTEROS_RENDER_EMBEDDED_LINK_OPTIONS} )
    display_list("Dependencies                : " ${WESTEROS_RENDER_EMBEDDED_DEPENDENCIES} )
endif()

add_library(${WESTEROS_RENDER_EMBEDDED_TARGET_NAME} SHARED ${WESTEROS_RENDER_EMBEDDED_INPUT})
target_compile_definitions(${WESTEROS_RENDER_EMBEDDED_TARGET_NAME} PRIVATE ${WESTEROS_RENDER_EMBEDDED_DEFINITIONS})
target_compile_options(${WESTEROS_RENDER_EMBEDDED_TARGET_NAME} PRIVATE ${WESTEROS_RENDER_EMBEDDED_OPTIONS})
target_include_directories(${WESTEROS_RENDER_EMBEDDED_TARGET_NAME} PUBLIC ${WESTEROS_RENDER_EMBEDDED_INCLUDE_DIRS})
target_link_libraries(${WESTEROS_RENDER_EMBEDDED_TARGET_NAME} ${WESTEROS_RENDER_EMBEDDED_LIBS})
foreach(DEP ${WESTEROS_RENDER_EMBEDDED_DEPENDENCIES})
    add_dependencies(${WESTEROS_RENDER_EMBEDDED_TARGET_NAME} ${DEP})
endforeach()
list_to_string(WESTEROS_RENDER_EMBEDDED_LINK_OPTIONS WESTEROS_RENDER_EMBEDDED_LINK_OPTIONS_STRING)
if (NOT "${WESTEROS_RENDER_EMBEDDED_LINK_OPTIONS_STRING}" STREQUAL "")
    set_target_properties(${WESTEROS_RENDER_EMBEDDED_TARGET_NAME} PROPERTIES LINK_FLAGS "${WESTEROS_RENDER_EMBEDDED_LINK_OPTIONS_STRING}")
endif()
set_target_properties(${WESTEROS_RENDER_EMBEDDED_TARGET_NAME} PROPERTIES VERSION ${WESTEROS_RENDER_EMBEDDED_PACKAGE_VERSION})
set_target_properties(${WESTEROS_RENDER_EMBEDDED_TARGET_NAME} PROPERTIES SOVERSION ${WESTEROS_RENDER_EMBEDDED_PACKAGE_VERSION_MAJOR})
set_target_properties(${WESTEROS_RENDER_EMBEDDED_TARGET_NAME} PROPERTIES OUTPUT_NAME ${WESTEROS_RENDER_EMBEDDED_TARGET_NAME})
set_target_properties(${WESTEROS_RENDER_EMBEDDED_TARGET_NAME} PROPERTIES POSITION_INDEPENDENT_CODE ON)

if (VERBOSE_BUILD)
    show_target_properties(${WESTEROS_RENDER_EMBEDDED_TARGET_NAME})
endif()

add_library(${WESTEROS_RENDER_EMBEDDED_TARGET_NAME}_STATIC STATIC ${WESTEROS_RENDER_EMBEDDED_INPUT})
target_compile_definitions(${WESTEROS_RENDER_EMBEDDED_TARGET_NAME}_STATIC PRIVATE ${WESTEROS_RENDER_EMBEDDED_DEFINITIONS})
target_compile_options(${WESTEROS_RENDER_EMBEDDED_TARGET_NAME}_STATIC PRIVATE ${WESTEROS_RENDER_EMBEDDED_OPTIONS})
target_include_directories(${WESTEROS_RENDER_EMBEDDED_TARGET_NAME}_STATIC PUBLIC ${WESTEROS_RENDER_EMBEDDED_INCLUDE_DIRS})
target_link_libraries(${WESTEROS_RENDER_EMBEDDED_TARGET_NAME}_STATIC ${WESTEROS_RENDER_EMBEDDED_LIBS})
foreach(DEP ${WESTEROS_RENDER_EMBEDDED_DEPENDENCIES})
    add_dependencies(${WESTEROS_RENDER_EMBEDDED_TARGET_NAME}_STATIC ${DEP})
endforeach()
list_to_string(WESTEROS_RENDER_EMBEDDED_LINK_OPTIONS WESTEROS_RENDER_EMBEDDED_LINK_OPTIONS_STRING)
if (NOT "${WESTEROS_RENDER_EMBEDDED_LINK_OPTIONS_STRING}" STREQUAL "")
    set_target_properties(${WESTEROS_RENDER_EMBEDDED_TARGET_NAME}_STATIC PROPERTIES LINK_FLAGS "${WESTEROS_RENDER_EMBEDDED_LINK_OPTIONS_STRING}")
endif()
set_target_properties(${WESTEROS_RENDER_EMBEDDED_TARGET_NAME}_STATIC PROPERTIES OUTPUT_NAME ${WESTEROS_RENDER_EMBEDDED_TARGET_NAME})
set_target_properties(${WESTEROS_RENDER_EMBEDDED_TARGET_NAME}_STATIC PROPERTIES SUFFIX .la)

if (VERBOSE_BUILD)
    show_target_properties(${WESTEROS_RENDER_EMBEDDED_TARGET_NAME}_STATIC)
endif()

add_custom_target(uninstall_${WESTEROS_RENDER_EMBEDDED_TARGET_NAME}
    COMMAND ${CMAKE_COMMAND} -DCOMPONENT=${MODULE_NAME} -P ${CMAKE_CURRENT_BINARY_DIR}/uninstall.cmake
    DEPENDS ${WESTEROS_RENDER_EMBEDDED_TARGET_NAME}
    COMMENT "Uninstalling ${WESTEROS_RENDER_EMBEDDED_TARGET_NAME}")

add_custom_target(install_${WESTEROS_RENDER_EMBEDDED_TARGET_NAME}
    COMMAND ${CMAKE_COMMAND} -DCOMPONENT=${MODULE_NAME} -P ${CMAKE_BINARY_DIR}/cmake_install.cmake
    DEPENDS ${WESTEROS_RENDER_EMBEDDED_TARGET_NAME}
    COMMENT "Installing ${WESTEROS_RENDER_EMBEDDED_TARGET_NAME}")

install(
    TARGETS ${WESTEROS_RENDER_EMBEDDED_TARGET_NAME}
    DESTINATION ${CMAKE_INSTALL_PREFIX}/lib
    COMPONENT ${WESTEROS_RENDER_EMBEDDED_TARGET_NAME})

install(
    TARGETS ${WESTEROS_RENDER_EMBEDDED_TARGET_NAME}_STATIC
    DESTINATION ${CMAKE_INSTALL_PREFIX}/lib
    COMPONENT ${WESTEROS_RENDER_EMBEDDED_TARGET_NAME})

set(WESTEROS_COMPOSITOR_PACKAGE_NAME westeros_compositor)
set(WESTEROS_COMPOSITOR_TARGET_NAME ${WESTEROS_COMPOSITOR_PACKAGE_NAME})
set(WESTEROS_COMPOSITOR_PACKAGE_DESCRIPTION "Westeros compositor")
set(WESTEROS_COMPOSITOR_PACKAGE_VERSION_MAJOR 0)
set(WESTEROS_COMPOSITOR_PACKAGE_VERSION_MINOR 0)
set(WESTEROS_COMPOSITOR_PACKAGE_VERSION_MICRO 0)
set(WESTEROS_COMPOSITOR_PACKAGE_VERSION ${WESTEROS_COMPOSITOR_PACKAGE_VERSION_MAJOR}.${WESTEROS_COMPOSITOR_PACKAGE_VERSION_MINOR}.${WESTEROS_COMPOSITOR_PACKAGE_VERSION_MICRO})

set(WESTEROS_COMPOSITOR_DEFINITIONS
    HAVE_CONFIG_H
    WESTEROS_PLATFORM_EMBEDDED
    WESTEROS_HAVE_WAYLAND_EGL
    ENABLE_SBPROTOCOL
    USE_XDG_VERSION5
    VCX=3)
if (SYNAPTICS_PLATFORM)
    list(APPEND WESTEROS_COMPOSITOR_DEFINITIONS
        LINUX
        EGL_API_FB)
elseif(RPI_PLATFORM)
    list(APPEND WESTEROS_COMPOSITOR_DEFINITIONS
        WESTEROS_PLATFORM_RPI
        WESTEROS_INVERTED_Y
        BUILD_WAYLAND)
elseif(X86_64_PLATFORM)
    list(APPEND WESTEROS_COMPOSITOR_DEFINITIONS
        )
else()
    message(ERROR "Unsupported platform")
endif()

set(WESTEROS_COMPOSITOR_INCLUDE_DIRS
    ./protocol/version5
    ./protocol
    ./simplebuffer
    ./simpleshell
    ${EGL_INCLUDE_DIRECTORY}
    )

set(WESTEROS_COMPOSITOR_OPTIONS
    )

set(WESTEROS_COMPOSITOR_LINK_OPTIONS
    )

set(WESTEROS_COMPOSITOR_DEPENDENCIES
    westeros-vpc-protocol
    westeros-xdgv5-protocol)

set(WESTEROS_COMPOSITOR_LIBS
    ${CMAKE_THREAD_LIBS_INIT}
    ${WAYLAND_SERVER_LIBRARIES}
    ${WAYLAND_CLIENT_LIBRARIES}
    ${EGL_LIBRARIES}
    ${LIB_XKB_COMMON_LIBRARIES}
    ${SIMPLEBUFFER_SERVER_TARGET_NAME}
    ${SIMPLESHELL_SERVER_TARGET_NAME})

file(GLOB WESTEROS_COMPOSITOR_INCLUDES
    *.h)
file(GLOB WESTEROS_COMPOSITOR_INCLUDES_PROTOCOL
    protocol/*.h)
file(GLOB WESTEROS_COMPOSITOR_INCLUDES_PROTOCOL_XDGSHELL
    protocol/version5/*.h)
list(APPEND WESTEROS_COMPOSITOR_INCLUDES ${WESTEROS_COMPOSITOR_INCLUDES_PROTOCOL})
list(APPEND WESTEROS_COMPOSITOR_INCLUDES ${WESTEROS_COMPOSITOR_INCLUDES_PROTOCOL_XDGSHELL})

set(WESTEROS_COMPOSITOR_SOURCES
    westeros-compositor.cpp
    westeros-nested.cpp
    westeros-render.cpp
    ${WESTEROS_VPC_PROTOCOL_OUTPUT_SOURCE}
    ${WESTEROS_XDGSHELL_V5_PROTOCOL_OUTPUT_SOURCE})

set(WESTEROS_COMPOSITOR_INPUT
    ${WESTEROS_COMPOSITOR_SOURCES}
    ${WESTEROS_COMPOSITOR_INCLUDES}
    )

if (BUILD_REFERENCE)
    list(APPEND WESTEROS_COMPOSITOR_DEFINITIONS BUILD_REFERENCE=${BUILD_REFERENCE})
endif()

if (VERBOSE_BUILD)
    display_list("Defines                     : " ${WESTEROS_COMPOSITOR_DEFINITIONS} )
    display_list("Compiler options            : " ${WESTEROS_COMPOSITOR_OPTIONS} )
    display_list("Source files                : " ${WESTEROS_COMPOSITOR_SOURCES} )
    display_list("Include files               : " ${WESTEROS_COMPOSITOR_INCLUDES} )
    display_list("Include dirs                : " ${WESTEROS_COMPOSITOR_INCLUDE_DIRS} )
    display_list("Link libs                   : " ${WESTEROS_COMPOSITOR_LIBS} )
    display_list("Linker options              : " ${WESTEROS_COMPOSITOR_LINK_OPTIONS} )
    display_list("Dependencies                : " ${WESTEROS_COMPOSITOR_DEPENDENCIES} )
endif()

add_library(${WESTEROS_COMPOSITOR_TARGET_NAME} SHARED ${WESTEROS_COMPOSITOR_INPUT})
target_compile_definitions(${WESTEROS_COMPOSITOR_TARGET_NAME} PRIVATE ${WESTEROS_COMPOSITOR_DEFINITIONS})
target_compile_options(${WESTEROS_COMPOSITOR_TARGET_NAME} PRIVATE ${WESTEROS_COMPOSITOR_OPTIONS})
target_include_directories(${WESTEROS_COMPOSITOR_TARGET_NAME} PUBLIC ${WESTEROS_COMPOSITOR_INCLUDE_DIRS})
target_link_libraries(${WESTEROS_COMPOSITOR_TARGET_NAME} ${WESTEROS_COMPOSITOR_LIBS})
foreach(DEP ${WESTEROS_COMPOSITOR_DEPENDENCIES})
    add_dependencies(${WESTEROS_COMPOSITOR_TARGET_NAME} ${DEP})
endforeach()
list_to_string(WESTEROS_COMPOSITOR_LINK_OPTIONS WESTEROS_COMPOSITOR_LINK_OPTIONS_STRING)
if (NOT "${WESTEROS_COMPOSITOR_LINK_OPTIONS_STRING}" STREQUAL "")
    set_target_properties(${WESTEROS_COMPOSITOR_TARGET_NAME} PROPERTIES LINK_FLAGS "${WESTEROS_COMPOSITOR_LINK_OPTIONS_STRING}")
endif()
set_target_properties(${WESTEROS_COMPOSITOR_TARGET_NAME} PROPERTIES VERSION ${WESTEROS_COMPOSITOR_PACKAGE_VERSION})
set_target_properties(${WESTEROS_COMPOSITOR_TARGET_NAME} PROPERTIES SOVERSION ${WESTEROS_COMPOSITOR_PACKAGE_VERSION_MAJOR})
set_target_properties(${WESTEROS_COMPOSITOR_TARGET_NAME} PROPERTIES OUTPUT_NAME ${WESTEROS_COMPOSITOR_TARGET_NAME})
set_target_properties(${WESTEROS_COMPOSITOR_TARGET_NAME} PROPERTIES POSITION_INDEPENDENT_CODE ON)

if (VERBOSE_BUILD)
    show_target_properties(${WESTEROS_COMPOSITOR_TARGET_NAME})
endif()

add_library(${WESTEROS_COMPOSITOR_TARGET_NAME}_STATIC STATIC ${WESTEROS_COMPOSITOR_INPUT})
target_compile_definitions(${WESTEROS_COMPOSITOR_TARGET_NAME}_STATIC PRIVATE ${WESTEROS_COMPOSITOR_DEFINITIONS})
target_compile_options(${WESTEROS_COMPOSITOR_TARGET_NAME}_STATIC PRIVATE ${WESTEROS_COMPOSITOR_OPTIONS})
target_include_directories(${WESTEROS_COMPOSITOR_TARGET_NAME}_STATIC PUBLIC ${WESTEROS_COMPOSITOR_INCLUDE_DIRS})
target_link_libraries(${WESTEROS_COMPOSITOR_TARGET_NAME}_STATIC ${WESTEROS_COMPOSITOR_LIBS})
foreach(DEP ${WESTEROS_COMPOSITOR_DEPENDENCIES})
    add_dependencies(${WESTEROS_COMPOSITOR_TARGET_NAME}_STATIC ${DEP})
endforeach()
list_to_string(WESTEROS_COMPOSITOR_LINK_OPTIONS WESTEROS_COMPOSITOR_LINK_OPTIONS_STRING)
if (NOT "${WESTEROS_COMPOSITOR_LINK_OPTIONS_STRING}" STREQUAL "")
    set_target_properties(${WESTEROS_COMPOSITOR_TARGET_NAME}_STATIC PROPERTIES LINK_FLAGS "${WESTEROS_COMPOSITOR_LINK_OPTIONS_STRING}")
endif()
set_target_properties(${WESTEROS_COMPOSITOR_TARGET_NAME}_STATIC PROPERTIES OUTPUT_NAME ${WESTEROS_COMPOSITOR_TARGET_NAME})
set_target_properties(${WESTEROS_COMPOSITOR_TARGET_NAME}_STATIC PROPERTIES SUFFIX .la)

if (VERBOSE_BUILD)
    show_target_properties(${WESTEROS_COMPOSITOR_TARGET_NAME}_STATIC)
endif()

add_custom_target(uninstall_${WESTEROS_COMPOSITOR_TARGET_NAME}
    COMMAND ${CMAKE_COMMAND} -DCOMPONENT=${MODULE_NAME} -P ${CMAKE_CURRENT_BINARY_DIR}/uninstall.cmake
    DEPENDS ${WESTEROS_COMPOSITOR_TARGET_NAME}
    COMMENT "Uninstalling ${WESTEROS_COMPOSITOR_TARGET_NAME}")

add_custom_target(install_${WESTEROS_COMPOSITOR_TARGET_NAME}
    COMMAND ${CMAKE_COMMAND} -DCOMPONENT=${MODULE_NAME} -P ${CMAKE_BINARY_DIR}/cmake_install.cmake
    DEPENDS ${WESTEROS_COMPOSITOR_TARGET_NAME}
    COMMENT "Installing ${WESTEROS_COMPOSITOR_TARGET_NAME}")

install(
    TARGETS ${WESTEROS_COMPOSITOR_TARGET_NAME}
    DESTINATION ${CMAKE_INSTALL_PREFIX}/lib
    COMPONENT ${WESTEROS_COMPOSITOR_TARGET_NAME})

install(
    TARGETS ${WESTEROS_COMPOSITOR_TARGET_NAME}_STATIC
    DESTINATION ${CMAKE_INSTALL_PREFIX}/lib
    COMPONENT ${WESTEROS_COMPOSITOR_TARGET_NAME})

set(WESTEROS_PACKAGE_NAME westeros)
set(WESTEROS_TARGET_NAME ${WESTEROS_PACKAGE_NAME})
set(WESTEROS_PACKAGE_DESCRIPTION "Westeros main application")
set(WESTEROS_PACKAGE_VERSION_MAJOR 0)
set(WESTEROS_PACKAGE_VERSION_MINOR 0)
set(WESTEROS_PACKAGE_VERSION_MICRO 0)
set(WESTEROS_PACKAGE_VERSION ${WESTEROS_PACKAGE_VERSION_MAJOR}.${WESTEROS_PACKAGE_VERSION_MINOR}.${WESTEROS_PACKAGE_VERSION_MICRO})

set(WESTEROS_DEFINITIONS
    HAVE_CONFIG_H
    WESTEROS_PLATFORM_EMBEDDED
    WESTEROS_HAVE_WAYLAND_EGL
    ENABLE_SBPROTOCOL
    USE_XDG_VERSION5
    VCX=3)
if (SYNAPTICS_PLATFORM)
    list(APPEND WESTEROS_DEFINITIONS
        LINUX
        EGL_API_FB)
elseif(RPI_PLATFORM)
    list(APPEND WESTEROS_DEFINITIONS
        WESTEROS_PLATFORM_RPI
        WESTEROS_INVERTED_Y
        BUILD_WAYLAND)
elseif(X86_64_PLATFORM)
    list(APPEND WESTEROS_DEFINITIONS
        )
else()
    message(ERROR "Unsupported platform")
endif()

set(WESTEROS_INCLUDE_DIRS
    ${EGL_INCLUDE_DIRECTORY}
    ${OPENGLES2_INCLUDE_DIRECTORY}
    )
if (SYNAPTICS_PLATFORM)
    list(APPEND WESTEROS_INCLUDE_DIRS
        ./syna/westeros-gl)
elseif(RPI_PLATFORM)
    list(APPEND WESTEROS_INCLUDE_DIRS
        ./rpi/westeros-gl)
elseif(X86_64_PLATFORM)
    list(APPEND WESTEROS_INCLUDE_DIRS
        ./drm/westeros-gl)
else()
    message(ERROR "Unsupported platform")
endif()

set(WESTEROS_OPTIONS
    )

set(WESTEROS_LINK_OPTIONS
    )

set(WESTEROS_DEPENDENCIES
    ${WESTEROS_COMPOSITOR_TARGET_NAME}
    ${WESTEROS_SOC_TARGET_NAME}
    )

set(WESTEROS_LIBS
    ${CMAKE_THREAD_LIBS_INIT}
    ${WAYLAND_SERVER_LIBRARIES}
    ${EGL_LIBRARIES}
    ${OPENGLES2_LIBRARIES}
    ${WESTEROS_DEPENDENCIES})

file(GLOB WESTEROS_INCLUDES
    *.h)

set(WESTEROS_SOURCES
    westeros-main.cpp)

set(WESTEROS_INPUT
    ${WESTEROS_SOURCES}
    ${WESTEROS_INCLUDES}
    )

if (BUILD_REFERENCE)
    list(APPEND WESTEROS_DEFINITIONS BUILD_REFERENCE=${BUILD_REFERENCE})
endif()

if (VERBOSE_BUILD)
    display_list("Defines                     : " ${WESTEROS_DEFINITIONS} )
    display_list("Compiler options            : " ${WESTEROS_OPTIONS} )
    display_list("Source files                : " ${WESTEROS_SOURCES} )
    display_list("Include files               : " ${WESTEROS_INCLUDES} )
    display_list("Include dirs                : " ${WESTEROS_INCLUDE_DIRS} )
    display_list("Link libs                   : " ${WESTEROS_LIBS} )
    display_list("Linker options              : " ${WESTEROS_LINK_OPTIONS} )
    display_list("Dependencies                : " ${WESTEROS_DEPENDENCIES} )
endif()

add_executable(${WESTEROS_TARGET_NAME} ${WESTEROS_INPUT})
target_compile_definitions(${WESTEROS_TARGET_NAME} PRIVATE ${WESTEROS_DEFINITIONS})
target_compile_options(${WESTEROS_TARGET_NAME} PRIVATE ${WESTEROS_OPTIONS})
target_include_directories(${WESTEROS_TARGET_NAME} PUBLIC ${WESTEROS_INCLUDE_DIRS})
target_link_libraries(${WESTEROS_TARGET_NAME} ${WESTEROS_LIBS})
foreach(DEP ${WESTEROS_DEPENDENCIES})
    add_dependencies(${WESTEROS_TARGET_NAME} ${DEP})
endforeach()
list_to_string(WESTEROS_LINK_OPTIONS WESTEROS_LINK_OPTIONS_STRING)
if (NOT "${WESTEROS_LINK_OPTIONS_STRING}" STREQUAL "")
    set_target_properties(${WESTEROS_TARGET_NAME} PROPERTIES LINK_FLAGS "${WESTEROS_LINK_OPTIONS_STRING}")
endif()
set_target_properties(${WESTEROS_TARGET_NAME} PROPERTIES VERSION ${WESTEROS_PACKAGE_VERSION})
set_target_properties(${WESTEROS_TARGET_NAME} PROPERTIES SOVERSION ${WESTEROS_PACKAGE_VERSION_MAJOR})
set_target_properties(${WESTEROS_TARGET_NAME} PROPERTIES OUTPUT_NAME ${WESTEROS_TARGET_NAME})
set_target_properties(${WESTEROS_TARGET_NAME} PROPERTIES POSITION_INDEPENDENT_CODE ON)

if (VERBOSE_BUILD)
    show_target_properties(${WESTEROS_TARGET_NAME})
endif()

add_custom_target(uninstall_${WESTEROS_TARGET_NAME}
    COMMAND ${CMAKE_COMMAND} -DCOMPONENT=${MODULE_NAME} -P ${CMAKE_CURRENT_BINARY_DIR}/uninstall.cmake
    DEPENDS ${WESTEROS_TARGET_NAME}
    COMMENT "Uninstalling ${WESTEROS_TARGET_NAME}")

add_custom_target(install_${WESTEROS_TARGET_NAME}
    COMMAND ${CMAKE_COMMAND} -DCOMPONENT=${MODULE_NAME} -P ${CMAKE_BINARY_DIR}/cmake_install.cmake
    DEPENDS ${WESTEROS_TARGET_NAME}
    COMMENT "Installing ${WESTEROS_TARGET_NAME}")

install(
    TARGETS ${WESTEROS_TARGET_NAME}
    DESTINATION ${CMAKE_INSTALL_PREFIX}/lib
    COMPONENT ${WESTEROS_TARGET_NAME})

set(WESTEROS_TEST_PACKAGE_NAME westeros_test)
set(WESTEROS_TEST_TARGET_NAME ${WESTEROS_TEST_PACKAGE_NAME})
set(WESTEROS_TEST_PACKAGE_DESCRIPTION "Westeros test application")
set(WESTEROS_TEST_PACKAGE_VERSION_MAJOR 0)
set(WESTEROS_TEST_PACKAGE_VERSION_MINOR 0)
set(WESTEROS_TEST_PACKAGE_VERSION_MICRO 0)
set(WESTEROS_TEST_PACKAGE_VERSION ${WESTEROS_TEST_PACKAGE_VERSION_MAJOR}.${WESTEROS_TEST_PACKAGE_VERSION_MINOR}.${WESTEROS_TEST_PACKAGE_VERSION_MICRO})

set(WESTEROS_TEST_DEFINITIONS
    HAVE_CONFIG_H
    WESTEROS_PLATFORM_EMBEDDED
    WESTEROS_HAVE_WAYLAND_EGL
    ENABLE_SBPROTOCOL
    USE_XDG_VERSION5
    VCX=3)
if (SYNAPTICS_PLATFORM)
    list(APPEND WESTEROS_TEST_DEFINITIONS
        LINUX
        EGL_API_FB)
elseif(RPI_PLATFORM)
    list(APPEND WESTEROS_TEST_DEFINITIONS
        WESTEROS_PLATFORM_RPI
        WESTEROS_INVERTED_Y
        BUILD_WAYLAND)
elseif(X86_64_PLATFORM)
    list(APPEND WESTEROS_TEST_DEFINITIONS
        )
else()
    message(ERROR "Unsupported platform")
endif()

set(WESTEROS_TEST_INCLUDE_DIRS
    ${EGL_INCLUDE_DIRECTORY}
    ${OPENGLES2_INCLUDE_DIRECTORY}
    )

set(WESTEROS_TEST_OPTIONS
    )

set(WESTEROS_TEST_LINK_OPTIONS
    )

set(WESTEROS_TEST_DEPENDENCIES
    ${SIMPLESHELL_CLIENT_TARGET_NAME}
    )

set(WESTEROS_TEST_LIBS
    ${CMAKE_THREAD_LIBS_INIT}
    ${WAYLAND_SERVER_LIBRARIES}
    ${WAYLAND_CLIENT_LIBRARIES}
    ${WAYLAND_EGL_LIBRARIES}
    ${LIB_XKB_COMMON_LIBRARIES}
    ${EGL_LIBRARIES}
    ${OPENGLES2_LIBRARIES}
    ${WESTEROS_TEST_DEPENDENCIES})

file(GLOB WESTEROS_TEST_INCLUDES
    *.h)

set(WESTEROS_TEST_SOURCES
    westeros-test.cpp)

set(WESTEROS_TEST_INPUT
    ${WESTEROS_TEST_SOURCES}
    ${WESTEROS_TEST_INCLUDES}
    )

if (BUILD_REFERENCE)
    list(APPEND WESTEROS_TEST_DEFINITIONS BUILD_REFERENCE=${BUILD_REFERENCE})
endif()

if (VERBOSE_BUILD)
    display_list("Defines                     : " ${WESTEROS_TEST_DEFINITIONS} )
    display_list("Compiler options            : " ${WESTEROS_TEST_OPTIONS} )
    display_list("Source files                : " ${WESTEROS_TEST_SOURCES} )
    display_list("Include files               : " ${WESTEROS_TEST_INCLUDES} )
    display_list("Include dirs                : " ${WESTEROS_TEST_INCLUDE_DIRS} )
    display_list("Link libs                   : " ${WESTEROS_TEST_LIBS} )
    display_list("Linker options              : " ${WESTEROS_TEST_LINK_OPTIONS} )
    display_list("Dependencies                : " ${WESTEROS_TEST_DEPENDENCIES} )
endif()

add_executable(${WESTEROS_TEST_TARGET_NAME} ${WESTEROS_TEST_INPUT})
target_compile_definitions(${WESTEROS_TEST_TARGET_NAME} PRIVATE ${WESTEROS_TEST_DEFINITIONS})
target_compile_options(${WESTEROS_TEST_TARGET_NAME} PRIVATE ${WESTEROS_TEST_OPTIONS})
target_include_directories(${WESTEROS_TEST_TARGET_NAME} PUBLIC ${WESTEROS_TEST_INCLUDE_DIRS})
target_link_libraries(${WESTEROS_TEST_TARGET_NAME} ${WESTEROS_TEST_LIBS})
foreach(DEP ${WESTEROS_TEST_DEPENDENCIES})
    add_dependencies(${WESTEROS_TEST_TARGET_NAME} ${DEP})
endforeach()
list_to_string(WESTEROS_TEST_LINK_OPTIONS WESTEROS_TEST_LINK_OPTIONS_STRING)
if (NOT "${WESTEROS_TEST_LINK_OPTIONS_STRING}" STREQUAL "")
    set_target_properties(${WESTEROS_TEST_TARGET_NAME} PROPERTIES LINK_FLAGS "${WESTEROS_TEST_LINK_OPTIONS_STRING}")
endif()
set_target_properties(${WESTEROS_TEST_TARGET_NAME} PROPERTIES VERSION ${WESTEROS_TEST_PACKAGE_VERSION})
set_target_properties(${WESTEROS_TEST_TARGET_NAME} PROPERTIES SOVERSION ${WESTEROS_TEST_PACKAGE_VERSION_MAJOR})
set_target_properties(${WESTEROS_TEST_TARGET_NAME} PROPERTIES OUTPUT_NAME ${WESTEROS_TEST_TARGET_NAME})
set_target_properties(${WESTEROS_TEST_TARGET_NAME} PROPERTIES POSITION_INDEPENDENT_CODE ON)

if (VERBOSE_BUILD)
    show_target_properties(${WESTEROS_TEST_TARGET_NAME})
endif()

add_custom_target(uninstall_${WESTEROS_TEST_TARGET_NAME}
    COMMAND ${CMAKE_COMMAND} -DCOMPONENT=${MODULE_NAME} -P ${CMAKE_CURRENT_BINARY_DIR}/uninstall.cmake
    DEPENDS ${WESTEROS_TEST_TARGET_NAME}
    COMMENT "Uninstalling ${WESTEROS_TEST_TARGET_NAME}")

add_custom_target(install_${WESTEROS_TEST_TARGET_NAME}
    COMMAND ${CMAKE_COMMAND} -DCOMPONENT=${MODULE_NAME} -P ${CMAKE_BINARY_DIR}/cmake_install.cmake
    DEPENDS ${WESTEROS_TEST_TARGET_NAME}
    COMMENT "Installing ${WESTEROS_TEST_TARGET_NAME}")

install(
    TARGETS ${WESTEROS_TEST_TARGET_NAME}
    DESTINATION ${CMAKE_INSTALL_PREFIX}/lib
    COMPONENT ${WESTEROS_TEST_TARGET_NAME})

set(WESTEROS_PLAYER_PACKAGE_NAME westeros_player)
set(WESTEROS_PLAYER_TARGET_NAME ${WESTEROS_PLAYER_PACKAGE_NAME})
set(WESTEROS_PLAYER_PACKAGE_DESCRIPTION "Westeros gstreamer test player")
set(WESTEROS_PLAYER_PACKAGE_VERSION_MAJOR 0)
set(WESTEROS_PLAYER_PACKAGE_VERSION_MINOR 0)
set(WESTEROS_PLAYER_PACKAGE_VERSION_MICRO 0)
set(WESTEROS_PLAYER_PACKAGE_VERSION ${WESTEROS_PLAYER_PACKAGE_VERSION_MAJOR}.${WESTEROS_PLAYER_PACKAGE_VERSION_MINOR}.${WESTEROS_PLAYER_PACKAGE_VERSION_MICRO})

set(WESTEROS_PLAYER_DEFINITIONS
    HAVE_CONFIG_H
    WESTEROS_PLATFORM_EMBEDDED
    WESTEROS_HAVE_WAYLAND_EGL
    ENABLE_SBPROTOCOL
    USE_XDG_VERSION5
    VCX=3)
if (SYNAPTICS_PLATFORM)
    list(APPEND WESTEROS_PLAYER_DEFINITIONS
        LINUX
        EGL_API_FB)
elseif(RPI_PLATFORM)
    list(APPEND WESTEROS_PLAYER_DEFINITIONS
        WESTEROS_PLATFORM_RPI
        WESTEROS_INVERTED_Y
        BUILD_WAYLAND)
elseif(X86_64_PLATFORM)
    list(APPEND WESTEROS_PLAYER_DEFINITIONS
        )
else()
    message(ERROR "Unsupported platform")
endif()

set(WESTEROS_PLAYER_INCLUDE_DIRS
    ./protocol/version5
    ${GSTREAMER_INCLUDE_DIR}
    ${LIBGLIB2_CONFIG_INCLUDE_DIR}
    ${LIBGLIB2_INCLUDE_DIR}
    ${WAYLAND_CLIENT_INCLUDE_DIR}
    )

set(WESTEROS_PLAYER_OPTIONS
    )

set(WESTEROS_PLAYER_LINK_OPTIONS
    )

set(WESTEROS_PLAYER_DEPENDENCIES
    )

set(WESTEROS_PLAYER_LIBS
    ${CMAKE_THREAD_LIBS_INIT}
    ${WAYLAND_SERVER_LIBRARIES}
    ${GSTREAMER_LIBRARY}
    ${LIBGLIB2_LIBRARY}
    ${LIBGOBJECT2_LIBRARY}
    ${WAYLAND_CLIENT_LIBRARIES}
    ${WAYLAND_EGL_LIBRARIES}
    ${OPENGLES2_LIBRARIES}
    ${EGL_LIBRARIES}
    ${WESTEROS_PLAYER_DEPENDENCIES})

file(GLOB WESTEROS_PLAYER_INCLUDES
    *.h)

set(WESTEROS_PLAYER_SOURCES
    westeros-player.cpp)

set(WESTEROS_PLAYER_INPUT
    ${WESTEROS_PLAYER_SOURCES}
    ${WESTEROS_PLAYER_INCLUDES}
    )

if (BUILD_REFERENCE)
    list(APPEND WESTEROS_PLAYER_DEFINITIONS BUILD_REFERENCE=${BUILD_REFERENCE})
endif()

if (VERBOSE_BUILD)
    display_list("Defines                     : " ${WESTEROS_PLAYER_DEFINITIONS} )
    display_list("Compiler options            : " ${WESTEROS_PLAYER_OPTIONS} )
    display_list("Source files                : " ${WESTEROS_PLAYER_SOURCES} )
    display_list("Include files               : " ${WESTEROS_PLAYER_INCLUDES} )
    display_list("Include dirs                : " ${WESTEROS_PLAYER_INCLUDE_DIRS} )
    display_list("Link libs                   : " ${WESTEROS_PLAYER_LIBS} )
    display_list("Linker options              : " ${WESTEROS_PLAYER_LINK_OPTIONS} )
    display_list("Dependencies                : " ${WESTEROS_PLAYER_DEPENDENCIES} )
endif()

add_executable(${WESTEROS_PLAYER_TARGET_NAME} ${WESTEROS_PLAYER_INPUT})
target_compile_definitions(${WESTEROS_PLAYER_TARGET_NAME} PRIVATE ${WESTEROS_PLAYER_DEFINITIONS})
target_compile_options(${WESTEROS_PLAYER_TARGET_NAME} PRIVATE ${WESTEROS_PLAYER_OPTIONS})
target_include_directories(${WESTEROS_PLAYER_TARGET_NAME} PUBLIC ${WESTEROS_PLAYER_INCLUDE_DIRS})
target_link_libraries(${WESTEROS_PLAYER_TARGET_NAME} ${WESTEROS_PLAYER_LIBS})
foreach(DEP ${WESTEROS_PLAYER_DEPENDENCIES})
    add_dependencies(${WESTEROS_PLAYER_TARGET_NAME} ${DEP})
endforeach()
list_to_string(WESTEROS_PLAYER_LINK_OPTIONS WESTEROS_PLAYER_LINK_OPTIONS_STRING)
if (NOT "${WESTEROS_PLAYER_LINK_OPTIONS_STRING}" STREQUAL "")
    set_target_properties(${WESTEROS_PLAYER_TARGET_NAME} PROPERTIES LINK_FLAGS "${WESTEROS_PLAYER_LINK_OPTIONS_STRING}")
endif()
set_target_properties(${WESTEROS_PLAYER_TARGET_NAME} PROPERTIES VERSION ${WESTEROS_PLAYER_PACKAGE_VERSION})
set_target_properties(${WESTEROS_PLAYER_TARGET_NAME} PROPERTIES SOVERSION ${WESTEROS_PLAYER_PACKAGE_VERSION_MAJOR})
set_target_properties(${WESTEROS_PLAYER_TARGET_NAME} PROPERTIES OUTPUT_NAME ${WESTEROS_PLAYER_TARGET_NAME})
set_target_properties(${WESTEROS_PLAYER_TARGET_NAME} PROPERTIES POSITION_INDEPENDENT_CODE ON)

if (VERBOSE_BUILD)
    show_target_properties(${WESTEROS_PLAYER_TARGET_NAME})
endif()

add_custom_target(uninstall_${WESTEROS_PLAYER_TARGET_NAME}
    COMMAND ${CMAKE_COMMAND} -DCOMPONENT=${MODULE_NAME} -P ${CMAKE_CURRENT_BINARY_DIR}/uninstall.cmake
    DEPENDS ${WESTEROS_PLAYER_TARGET_NAME}
    COMMENT "Uninstalling ${WESTEROS_PLAYER_TARGET_NAME}")

add_custom_target(install_${WESTEROS_PLAYER_TARGET_NAME}
    COMMAND ${CMAKE_COMMAND} -DCOMPONENT=${MODULE_NAME} -P ${CMAKE_BINARY_DIR}/cmake_install.cmake
    DEPENDS ${WESTEROS_PLAYER_TARGET_NAME}
    COMMENT "Installing ${WESTEROS_PLAYER_TARGET_NAME}")

install(
    TARGETS ${WESTEROS_PLAYER_TARGET_NAME}
    DESTINATION ${CMAKE_INSTALL_PREFIX}/lib
    COMPONENT ${WESTEROS_PLAYER_TARGET_NAME})

set(WESTEROS_SINK_PACKAGE_NAME westeros_sink)
set(WESTEROS_SINK_TARGET_NAME ${WESTEROS_SINK_PACKAGE_NAME})
set(WESTEROS_SINK_PACKAGE_DESCRIPTION "Westeros gstreamer sink")
set(WESTEROS_SINK_PACKAGE_VERSION_MAJOR 0)
set(WESTEROS_SINK_PACKAGE_VERSION_MINOR 0)
set(WESTEROS_SINK_PACKAGE_VERSION_MICRO 0)
set(WESTEROS_SINK_PACKAGE_VERSION ${WESTEROS_SINK_PACKAGE_VERSION_MAJOR}.${WESTEROS_SINK_PACKAGE_VERSION_MINOR}.${WESTEROS_SINK_PACKAGE_VERSION_MICRO})

set(WESTEROS_SINK_DEFINITIONS
    HAVE_CONFIG_H
    WESTEROS_PLATFORM_EMBEDDED
    WESTEROS_HAVE_WAYLAND_EGL
    ENABLE_SBPROTOCOL
    USE_XDG_VERSION5
    VCX=3)
if (SYNAPTICS_PLATFORM)
    list(APPEND WESTEROS_SINK_DEFINITIONS
        LINUX
        EGL_API_FB
        __LINUX__)
elseif(RPI_PLATFORM)
    list(APPEND WESTEROS_SINK_DEFINITIONS
        STANDALONE
        __STDC_CONSTANT_MACROS
        __STDC_LIMIT_MACROS
        TARGET_POSIX
        _LINUX
        _REENTRANT
        USE_EXTERNAL_OMX
        HAVE_LIBBCM_HOST
        USE_EXTERNAL_LIBBCM_HOST
        USE_VCHIQ_ARM
        HAVE_LIBOPENMAX=2
        OMX
        OMX_SKIP64BIT
        WESTEROS_PLATFORM_RPI
        WESTEROS_INVERTED_Y
        BUILD_WAYLAND)
elseif(X86_64_PLATFORM)
    list(APPEND WESTEROS_SINK_DEFINITIONS
        )
else()
    message(ERROR "Unsupported platform")
endif()

set(WESTEROS_SINK_INCLUDE_DIRS
    .
    ./cfg
    ./protocol/version5
    ${GSTREAMER_INCLUDE_DIR}
    ${LIBGLIB2_CONFIG_INCLUDE_DIR}
    ${LIBGLIB2_INCLUDE_DIR}
    ${WAYLAND_CLIENT_INCLUDE_DIR}
    )
if (SYNAPTICS_PLATFORM)
    list(APPEND WESTEROS_SINK_INCLUDE_DIRS
        ${MARVELL_AMP_CLIENT_INCLUDE_DIRECTORY}
        ${MARVELL_OSAL_INCLUDE_DIRECTORY}
        ${MARVELL_LIBAV_INCLUDE_DIRECTORY})
elseif(RPI_PLATFORM)
    list(APPEND WESTEROS_SINK_INCLUDE_DIRS
        ./rpi/westeros-sink
        ./rpi/westeros-gl
        ./westeros-sink)
elseif(X86_64_PLATFORM)
else()
    message(ERROR "Unsupported platform")
endif()

set(WESTEROS_SINK_OPTIONS
    -x c++
    -U_FORTIFY_SOURCE
    -ftree-vectorize
    -pipe
    )

set(WESTEROS_SINK_LINK_OPTIONS
    )

set(WESTEROS_SINK_DEPENDENCIES
    ${WESTEROS_COMPOSITOR_TARGET_NAME}
    ${SIMPLESHELL_CLIENT_TARGET_NAME})

set(WESTEROS_SINK_LIBS
    ${CMAKE_THREAD_LIBS_INIT}
    ${GSTREAMER_BASE_LIBRARY}
    ${GSTREAMER_LIBRARY}
    ${LIBGOBJECT2_LIBRARY}
    ${LIBGLIB2_LIBRARY}
    ${WAYLAND_CLIENT_LIBRARIES}
    ${MARVELL_OSAL_LIBRARIES}
    ${MARVELL_AMP_CLIENT_LIBRARIES}
    ${MARVELL_LIBAV_LIBRARIES_AVUTIL}
    ${WAYLAND_EGL_LIBRARIES}
    ${OPENGLES2_LIBRARIES}
    ${EGL_LIBRARIES}
    ${WESTEROS_SINK_DEPENDENCIES})

file(GLOB WESTEROS_SINK_INCLUDES
    *.h)

if(RPI_PLATFORM)
    file(GLOB WESTEROS_SINK_INCLUDES_RPI_SINK
        rpi/westeros-sink/*.h)
    list(APPEND WESTEROS_SINK_INCLUDES ${WESTEROS_SINK_INCLUDES_RPI_SINK})
    file(GLOB WESTEROS_SINK_INCLUDES_RPI_GL
        rpi/westeros-gl/*.h)
    list(APPEND WESTEROS_SINK_INCLUDES ${WESTEROS_SINK_INCLUDES_RPI_GL})
endif()
if(SYNAPTICS_PLATFORM)
    file(GLOB WESTEROS_SINK_INCLUDES_SYNAPTICS
        syna/westeros-sink/*.h)
    list(APPEND WESTEROS_SINK_INCLUDES ${WESTEROS_SINK_INCLUDES_SYNAPTICS})
endif()

set(WESTEROS_SINK_SOURCES
    )
if(RPI_PLATFORM)
    list(APPEND WESTEROS_SINK_SOURCES
        westeros-sink/westeros-sink.c
        rpi/westeros-sink/westeros-sink-soc.c)
endif()
if(SYNAPTICS_PLATFORM)
    list(APPEND WESTEROS_SINK_SOURCES
        syna/westeros-sink/westeros-sink.c
        syna/westeros-sink/westeros-sink-soc.c)
endif()

set(WESTEROS_SINK_INPUT
    ${WESTEROS_SINK_SOURCES}
    ${WESTEROS_SINK_INCLUDES}
    )

if (BUILD_REFERENCE)
    list(APPEND WESTEROS_SINK_DEFINITIONS BUILD_REFERENCE=${BUILD_REFERENCE})
endif()

if (VERBOSE_BUILD)
    display_list("Defines                     : " ${WESTEROS_SINK_DEFINITIONS} )
    display_list("Compiler options            : " ${WESTEROS_SINK_OPTIONS} )
    display_list("Source files                : " ${WESTEROS_SINK_SOURCES} )
    display_list("Include files               : " ${WESTEROS_SINK_INCLUDES} )
    display_list("Include dirs                : " ${WESTEROS_SINK_INCLUDE_DIRS} )
    display_list("Link libs                   : " ${WESTEROS_SINK_LIBS} )
    display_list("Linker options              : " ${WESTEROS_SINK_LINK_OPTIONS} )
    display_list("Dependencies                : " ${WESTEROS_SINK_DEPENDENCIES} )
endif()

add_library(${WESTEROS_SINK_TARGET_NAME} SHARED ${WESTEROS_SINK_INPUT})
target_compile_definitions(${WESTEROS_SINK_TARGET_NAME} PRIVATE ${WESTEROS_SINK_DEFINITIONS})
target_compile_options(${WESTEROS_SINK_TARGET_NAME} PRIVATE ${WESTEROS_SINK_OPTIONS})
target_include_directories(${WESTEROS_SINK_TARGET_NAME} PUBLIC ${WESTEROS_SINK_INCLUDE_DIRS})
target_link_libraries(${WESTEROS_SINK_TARGET_NAME} ${WESTEROS_SINK_LIBS})
foreach(DEP ${WESTEROS_SINK_DEPENDENCIES})
    add_dependencies(${WESTEROS_SINK_TARGET_NAME} ${DEP})
endforeach()
list_to_string(WESTEROS_SINK_LINK_OPTIONS WESTEROS_SINK_LINK_OPTIONS_STRING)
if (NOT "${WESTEROS_SINK_LINK_OPTIONS_STRING}" STREQUAL "")
    set_target_properties(${WESTEROS_SINK_TARGET_NAME} PROPERTIES LINK_FLAGS "${WESTEROS_SINK_LINK_OPTIONS_STRING}")
endif()
set_target_properties(${WESTEROS_SINK_TARGET_NAME} PROPERTIES OUTPUT_NAME ${WESTEROS_SINK_TARGET_NAME})
set_target_properties(${WESTEROS_SINK_TARGET_NAME} PROPERTIES POSITION_INDEPENDENT_CODE ON)

if (VERBOSE_BUILD)
    show_target_properties(${WESTEROS_SINK_TARGET_NAME})
endif()

add_custom_target(uninstall_${WESTEROS_SINK_TARGET_NAME}
    COMMAND ${CMAKE_COMMAND} -DCOMPONENT=${MODULE_NAME} -P ${CMAKE_CURRENT_BINARY_DIR}/uninstall.cmake
    DEPENDS ${WESTEROS_SINK_TARGET_NAME}
    COMMENT "Uninstalling ${WESTEROS_SINK_TARGET_NAME}")

add_custom_target(install_${WESTEROS_SINK_TARGET_NAME}
    COMMAND ${CMAKE_COMMAND} -DCOMPONENT=${MODULE_NAME} -P ${CMAKE_BINARY_DIR}/cmake_install.cmake
    DEPENDS ${WESTEROS_SINK_TARGET_NAME}
    COMMENT "Installing ${WESTEROS_SINK_TARGET_NAME}")

install(
    TARGETS ${WESTEROS_SINK_TARGET_NAME}
    DESTINATION ${CMAKE_INSTALL_PREFIX}/lib
    COMPONENT ${WESTEROS_SINK_TARGET_NAME})

